const t=JSON.parse('{"key":"v-51926f46","path":"/front-end/javascript/es6/var-let-const.html","title":"var、const和var","lang":"zh-CN","frontmatter":{"index":false,"icon":"laptop-code","category":["JavaScript"],"description":"var、const和var let和const是在ES6出现的，而var是在此之前。 var声明的变量是会声明置顶，并且定义在全局作用域中，最终会导致全局污染。 let只会在块级作用域中生效，不存在变量提升（不允许在声明前使用变量，在声明之前的块作用域范围即为暂时性死区TDZ）；有效地避免了var全局污染问题；不允许重复声明 const与let一样，区别在于cosnt声明的变量不允许被改变（基本类型，引用类型的内存地址不允许改变）","head":[["meta",{"property":"og:url","content":"https://xiaofengzeng.github.io/kite-notes/front-end/javascript/es6/var-let-const.html"}],["meta",{"property":"og:site_name","content":"kite-notes"}],["meta",{"property":"og:title","content":"var、const和var"}],["meta",{"property":"og:description","content":"var、const和var let和const是在ES6出现的，而var是在此之前。 var声明的变量是会声明置顶，并且定义在全局作用域中，最终会导致全局污染。 let只会在块级作用域中生效，不存在变量提升（不允许在声明前使用变量，在声明之前的块作用域范围即为暂时性死区TDZ）；有效地避免了var全局污染问题；不允许重复声明 const与let一样，区别在于cosnt声明的变量不允许被改变（基本类型，引用类型的内存地址不允许改变）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-26T06:36:59.000Z"}],["meta",{"property":"article:author","content":"Kite.Zeng"}],["meta",{"property":"article:modified_time","content":"2023-12-26T06:36:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"var、const和var\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-26T06:36:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kite.Zeng\\"}]}"]]},"headers":[],"git":{"createdTime":1703572619000,"updatedTime":1703572619000,"contributors":[{"name":"XiaofengZeng","email":"zengxf12123@163.com","commits":1}]},"readingTime":{"minutes":0.56,"words":168},"filePathRelative":"front-end/javascript/es6/var-let-const.md","localizedDate":"2023年12月26日","excerpt":"<h1> var、const和var</h1>\\n<p><code>let</code>和<code>const</code>是在ES6出现的，而<code>var</code>是在此之前。</p>\\n<p>var声明的变量是会声明置顶，并且定义在全局作用域中，最终会导致全局污染。</p>\\n<p>let只会在块级作用域中生效，不存在变量提升（不允许在声明前使用变量，在声明之前的块作用域范围即为暂时性死区TDZ）；有效地避免了var全局污染问题；不允许重复声明\\nconst与let一样，区别在于cosnt声明的变量不允许被改变（基本类型，引用类型的内存地址不允许改变）</p>\\n","autoDesc":true}');export{t as data};
