import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as d,e as o}from"./app-5hxSoQGh.js";const l={},c=o('<h1 id="set和weakset、map和weakmap" tabindex="-1"><a class="header-anchor" href="#set和weakset、map和weakmap" aria-hidden="true">#</a> Set和WeakSet、Map和WeakMap</h1><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h2><ul><li>类似数组的数据结构，每个成员的值是唯一的</li><li>Set初始化参数接受数组（具有Iterable接口的数据结构），会将重复值排除，只保留一个</li><li>添加值时，不会做类型的自动转换（5 和 “5”），但NaN会被认为是相同（实际上NaN不等于NaN）</li><li>支持<code>keys()</code>，<code>values()</code>，<code>entries()</code>方法，<code>keys()</code>和<code>values()</code>方法的效果是一样的</li><li>可以实现 并集、交集、差集</li><li>常见场景 <ul><li>使用Set实现数组的去重 <code>[...new Set(array)]</code> / <code>Array.from(new Set(array))</code></li><li>使用Set实现字符串去重 <code>[...new Set(&#39;ababbc&#39;)].join(&#39;&#39;)</code></li></ul></li></ul><h2 id="weakset" tabindex="-1"><a class="header-anchor" href="#weakset" aria-hidden="true">#</a> WeakSet</h2><ul><li>类似Set，也不支持重复值。构造函数的参数是<strong>数组/类数组（具有 Iterable 接口的对象）</strong>，数组的成员只能是对象，不能是其他类型的值</li><li>WebSet中的对象都是弱引用，会被垃圾回收机制处理，导致WeakSet中的数据不可控，因此不可遍历（没有<code>.size</code>和<code>.forEach</code>属性）</li><li>可以用 new 命令构造</li></ul><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h2><ul><li>类似对象的Hash结构，实现“值-值”的对应，而对象是“字符串-值”的对应，是一种更加完善的Hash结构</li><li>构造函数的参数支持“键-值”（<code>.set(key, value)</code>）对应 和 双元素的数组（<code>new Map([[key1, value1], [key2, value2]])</code>）以及<strong>具有 Iterable 接口的对象</strong></li><li>重复声明相同键的值，则会覆盖替换</li><li>Map的键是如果是对象，会通过内存地址区分；对于基本类型，则会匹配值是否严格相等（<code>===</code>）</li><li>支持<code>keys()</code>，<code>values()</code>，<code>entries()</code>、<code>forEach()</code>方法</li></ul><h2 id="weakmap" tabindex="-1"><a class="header-anchor" href="#weakmap" aria-hidden="true">#</a> WeakMap</h2><ul><li>只支持对象作为键名，不支持类型值作为键名</li><li><strong>键名</strong>引用的对象都是弱引用，键名不算入引用计数（垃圾回收机制不会考虑该引用，因此只要引用的对象的其他引用都被清除，那么该键值对也会被释放，不用手动删除。这样就可以防止内存泄漏）</li><li>不支持遍历方法，<code>keys()</code>，<code>values()</code>，<code>entries()</code>、<code>forEach()</code>，只有<code>get()</code>、<code>set()</code>、<code>has()</code>、<code>delete()</code>方法</li><li>使用场景 <ul><li>DOM 节点作为键名，对节点的操作进行记录，当节点删除时，WeakMap的对应的键值对也释放了</li><li>部署私有属性。key是实例，value对应属性值，那么当实例消除后，内存被回收</li></ul></li></ul>',9),i=[c];function t(r,s){return a(),d("div",null,i)}const u=e(l,[["render",t],["__file","Set-and-Map.html.vue"]]);export{u as default};
