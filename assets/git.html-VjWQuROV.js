import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as p,c as l,f as c,b as n,d as s,a as e,e as t}from"./app-S7AmktQN.js";const r="/kite-notes/assets/git-vs-svn-1-xCi5c_wv.png",d="/kite-notes/assets/git-workflow-1-O8P03Mtw.png",u="/kite-notes/assets/file-lifecycle-b1zbZA_x.png",m="/kite-notes/assets/git-workflow-2-MvoHqa13.png",v="/kite-notes/assets/git-workflow-3-tWSd-em1.png",k={},g=n("h1",{id:"git",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#git","aria-hidden":"true"},"#"),s(" Git")],-1),b=n("blockquote",null,[n("p",null,"Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. —— Git是一个免费的开源分布式版本控制系统，可以快速高效地处理从小到大的所有项目。")],-1),h=n("code",null,"Git",-1),f={href:"https://baike.baidu.com/item/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%9C%AC%E7%BA%B3%E7%AC%AC%E5%85%8B%E7%89%B9%C2%B7%E6%89%98%E7%93%A6%E5%85%B9/1034429",target:"_blank",rel:"noopener noreferrer"},x=t('<h2 id="git-vs-svn" tabindex="-1"><a class="header-anchor" href="#git-vs-svn" aria-hidden="true">#</a> Git vs. SVN</h2><figure><img src="'+r+'" alt="Git vs SVN" tabindex="0" loading="lazy"><figcaption>Git vs SVN</figcaption></figure><h3 id="联系与区别" tabindex="-1"><a class="header-anchor" href="#联系与区别" aria-hidden="true">#</a> 联系与区别</h3><ol><li><strong>核心架构不同</strong>（<strong>最核心的区别</strong>）：<code>Git</code>是<strong>分布式</strong>的版本控制系统，而<code>SVN</code>是<strong>集中式</strong>的，因此，<code>Git</code>支持离线工作，<code>SVN</code>必须联网才能工作</li><li><strong>概念和指令不同</strong>：<code>SVN</code>概念和指令较少，上手容易，而<code>Git</code>概念多且复杂，如<code>add</code>、<code>commit</code>、<code>push</code>、<code>fetch</code>、<code>pull</code>等等，概念多但也意味着功能更加强大</li><li><strong>分支管理不同</strong>：<code>Git</code>可以有本地分支，且分支的指针指向的某次提交，而<code>SVN</code>没有本地分支，它的分支只是一个拷贝的目录。 因此，<code>Git</code>分支创建和切换十分便捷，并且在开发过程中遇到突发事情需要另外处理时，使用<code>Git</code>的<code>stash</code>将当前改动临时存储，使得分支管理更加灵活</li></ol><table><thead><tr><th></th><th>Git</th><th>SVN</th></tr></thead><tbody><tr><td>服务器架构</td><td>在本地安装并充当服务器和客户端</td><td>需要中央服务器和用户客户端</td></tr><tr><td>修订</td><td>Git 是一个 SCM（源代码管理）工具。因此，它没有全局修订号</td><td>SVN 是一个版本控制系统。因此，它具有全局修订号</td></tr><tr><td>存储库克隆</td><td>支持</td><td>不支持</td></tr><tr><td>存储格式</td><td>元数据</td><td>文件</td></tr><tr><td>存储要求</td><td>处理大型二进制文件的能力有限</td><td>除了代码之外，还可以处理大型二进制文件</td></tr><tr><td>分支</td><td>分支是对某个提交的引用。可以随时创建、删除和更改它们，而不会影响其他提交。</td><td>分支被创建为存储库内的目录，当分支准备好时，它被提交回主干</td></tr><tr><td>访问控制和权限</td><td>允许所有贡献者对整个代码库具有相同的权限</td><td>允许对每个文件级别和每个目录级别进行读写访问控制的细化权限</td></tr><tr><td>上手容易度</td><td>困难</td><td>简单</td></tr><tr><td>加密散列</td><td>为了防止存储库损坏（由于网络问题或磁盘故障），Git 对内容进行哈希加密。</td><td>不适用</td></tr><tr><td>许可证</td><td>GNU（通用公共许可证）</td><td>在 Apache 许可下开源</td></tr><tr><td>变更追踪</td><td>存储库级别</td><td>文件级别</td></tr><tr><td>原开发者</td><td>Linus Torvalds（为 Linux 内核代码控制而开发）</td><td>CollabNet公司</td></tr></tbody></table><h2 id="安装与配置" tabindex="-1"><a class="header-anchor" href="#安装与配置" aria-hidden="true">#</a> 安装与配置</h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3>',7),y={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},q=n("h3",{id:"配置-ssh",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#配置-ssh","aria-hidden":"true"},"#"),s(" 配置(SSH)")],-1),_=t(`<li><p>修改本地配置config</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置全局用户名称</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>
<span class="token comment"># 设置全局用户邮箱</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token operator">&lt;</span>email<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打开<code>Git Bash</code>，生成rsa文件，以及ssh</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 生成新的ssh</span>
<span class="token comment"># &lt;email&gt;: 电子邮箱</span>
<span class="token comment">#-t: 密钥类型, 可以选择 dsa | ecdsa | ed25519 | rsa;</span>
<span class="token comment">#-b: 指定密钥长度</span>
<span class="token comment">#-f: 密钥目录位置, 默认为当前用户home路径下的.ssh隐藏目录, 也就是~/.ssh/, 同时默认密钥文件名以id_rsa开头. 如果是root用户, 则在/root/.ssh/id_rsa, 若为其他用户, 则在/home/&lt;username&gt;/.ssh/id_rsa;</span>
<span class="token comment">#-C: 指定此密钥的备注信息, 需要配置多个免密登录时, 建议携带;</span>
ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-C</span> <span class="token string">&quot;&lt;email&gt;&quot;</span>

<span class="token comment"># 按回车三次</span>
<span class="token comment"># 查看生成的文件，并复制至Github上</span>
<span class="token function">cat</span> ~/.ssh/id_rsa.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),w=n("p",null,"在Github上创建ssh key",-1),G=n("code",null,"Settings",-1),S=n("code",null,"SSH adn GPG keys",-1),z={href:"https://github.com/settings/keys",target:"_blank",rel:"noopener noreferrer"},E=n("li",null,[s("点击"),n("code",null,"New SSH key"),s("，将复制的内容粘贴至"),n("code",null,"Key"),s("文本框，并设置好"),n("code",null,"Title")],-1),N=n("li",null,[s("保存，即"),n("code",null,"Add SSH key")],-1),A=t(`<li><p>检查是否能够通过SSH与GitHub通信</p><ul><li>如果出现<code>Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>，说明配置成功；</li><li>如果出现<code>Permission denied (publickey).</code>，说明配置失败，需要重新操作。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -T: 禁止分配伪终端</span>
<span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com
<span class="token comment"># 若有提示则输入yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),V=t('<h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><figure><img src="'+d+'" alt="Git工作流" tabindex="0" loading="lazy"><figcaption>Git工作流</figcaption></figure><ul><li><strong>Workspace</strong>：工作区，也称<u>工作副本</u>，就是计算机上的一个目录。开发者日常主要的开发工作都在这完成 <ul><li>基于开发分支<code>develop</code>创建的特性分支<code>feature/xxx</code>，进行功能模块开发\\</li><li>基于开发分支<code>develop</code>创建的版本分支<code>release/x.x.x</code>，进行版本的发布说明</li><li>基于主分支<code>main</code>的热修复分支<code>hotfix/xxx</code>，对上线的产品进行快速修复</li><li>等等...</li></ul></li><li><strong>Respository</strong>：本地版本库，也称为<u>本地仓库</u>。在这既可以与工作空间的状态进行管理（主要是对分支的管理操作）：切换本地分支、本地版本库与远程版本库的改动推送/拉取</li><li><strong>Remote</strong>: 远程版本库，也称为<u>远程仓库</u>。用于存储各种正式代码分支，与本地版本库进行相关操作 <ul><li>主分支<code>main</code></li><li>开发分支<code>develop</code></li><li>等等...</li></ul></li><li><strong>Index</strong>：暂存区，类似缓存的地方，临时保存修改内容：比如新增改动、提交改动、暂存/恢复先前修改。每次操作后生成的索引值（基于<code>SHA-1</code>算法生成的哈希校验和），一般只需要确认其前3~4位就能够找到对应的改动记录。</li></ul><h3 id="工作区-workspace-管理" tabindex="-1"><a class="header-anchor" href="#工作区-workspace-管理" aria-hidden="true">#</a> 工作区(Workspace)管理</h3><h4 id="文件状态" tabindex="-1"><a class="header-anchor" href="#文件状态" aria-hidden="true">#</a> 文件状态</h4><p>在Git中，文件状态分为<code>已跟踪</code>和<code>未跟踪</code>，除了已跟踪的文件以外，其他都是未跟踪文件。 已跟踪的文件是指那些被纳入了版本控制的文件，经过一段时间的工作后，状态可能是如下四种：</p><ul><li><strong>Untracked</strong>(未跟踪)：未被Git跟踪的文件，一般为新建/删除文件</li><li><strong>Unmodified</strong>(未改动)：已被Git跟踪的文件，但在工作过程中未被修改的文件</li><li><strong>Modified</strong>(有改动)：已被Git跟踪的文件，并且在工作中发生改动的文件</li><li><strong>Staged</strong>(已暂存)：已被Git跟踪的文件，并且已被添加至暂存区</li></ul><figure><img src="'+u+`" alt="文件的状态变化周期" tabindex="0" loading="lazy"><figcaption>文件的状态变化周期</figcaption></figure><h4 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令" aria-hidden="true">#</a> 常用指令</h4><ul><li><p><strong>查看状态</strong></p><p><code>git status</code>查看当前工作区的文件状态，如当前处在的分支、改动的文件、未跟踪的文件等...</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -s: 状态简览</span>
<span class="token function">git</span> status <span class="token punctuation">[</span>--short<span class="token operator">|</span>-s<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>跟踪新增的文件/暂存已修改的文件</strong></p><p><code>git add</code>不仅可以跟踪新增文件，还能够将已修改的文件进行暂存， 每次<code>add</code>都将文件添加至暂存区，并且生成一个索引值，该索引值标识此次提交的工作树(working tree)的快照，快照的内容用于后续暂存的提交。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># pathspec: 具体暂存文件的路径</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.
<span class="token comment"># 将所有改动的文件添加至暂存区，不管是否原本已经存在提交索引</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>
<span class="token comment"># 将当前目录下的所有文件添加至暂存区</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token comment"># 强制新增改动，一般用于新增.gitignore文件的改动</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>查看已暂存和未暂存的修改</strong></p><p><code>git diff</code>可以将当前工作副本与暂存区的工作树进行对比，发现改动的文件以及改动的内容；也可以查看已暂存的将要添加到下次提交的改动内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前工作区与最近一次暂存内容的改动区别</span>
<span class="token function">git</span> <span class="token function">diff</span>
<span class="token comment"># 查看已暂存的将要添加到下次提交里的内容的改动区别</span>
<span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>--cached<span class="token operator">|</span>--staged<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>提交暂存的修改</strong></p><p>将暂存区的改动内容提交至本地仓库，在此之前需要确认是否还有改动遗漏，有则需要再<code>git add</code>添加改动，否则接下来的提交不会记录尚未暂存的改动。 因此，可以先<code>git status</code>查看当前工作区状态，确保都暂存再执行<code>git commit</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 会自动启动编辑器来输入提交信息</span>
<span class="token function">git</span> commit
<span class="token comment"># -m：提交信息</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;&lt;message&gt;&quot;</span>
<span class="token comment"># -a: 跳过git add过程，直接跟踪的文件暂存起来并提交</span>
<span class="token function">git</span> commit <span class="token parameter variable">-a</span> <span class="token parameter variable">-m</span> <span class="token string">&quot;&lt;message&gt;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>移除文件</strong></p><p><code>git rm</code>能够将文件从<strong>暂存区</strong>和<strong>工作区</strong>中移除文件，这是彻底的移除文件。 如果只是简单的从<strong>工作区</strong>删除文件，在<code>git status</code>中能看到删除的文件的改动状态则会变成<code>deleted</code>，然后再使用<code>git rm</code>将该文件改动添加至暂存区</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将工作区和暂存区的指定文件移除</span>
<span class="token function">git</span> <span class="token function">rm</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
<span class="token comment"># 将暂存区的指定文件移除，但保留工作区中的对应文件</span>
<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>移动文件/文件更名</strong></p><p>在Git中，移动文件可以使用<code>git mv</code>完成，正如Linux的<code>mv</code>一样，能够移动文件，也能够更改文件名。 若是更改文件名称，在<code>git status</code>中能看到更名的文件的改动状态则会变成<code>renamed</code>。 本质上，使用<code>git mv</code>更名也是一次文件的删除<code>rm</code>再添加<code>add</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">mv</span> file_from file_to
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="版本库-repository-管理" tabindex="-1"><a class="header-anchor" href="#版本库-repository-管理" aria-hidden="true">#</a> 版本库(Repository)管理</h3><h4 id="本地版本库-local-管理" tabindex="-1"><a class="header-anchor" href="#本地版本库-local-管理" aria-hidden="true">#</a> 本地版本库(Local)管理</h4><ul><li><strong>获取Git仓库</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将当前文件夹初始化为Git仓库</span>
<span class="token function">git</span> init
<span class="token comment"># 将远程仓库克隆至本地</span>
<span class="token comment"># url：协议地址(HTTPS|SSH)</span>
<span class="token comment"># dirname: 新目录名称</span>
<span class="token function">git</span> clone <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>dirname<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>查看提交历史</strong></p><p><code>git log</code>会根据时间顺序列出所有的提交，最近的一次提交列在最上面， 并且列出每个提交的 <strong>SHA-1 校验和</strong>、<strong>作者的名字和电子邮件地址</strong>、<strong>提交时间</strong>以及<strong>提交说明</strong></p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -p: 列出每次的修改内容</span>
<span class="token comment"># --stat：列出每次文件修改统计信息</span>
<span class="token comment"># --graph：使用ASCII字符列出分支、合并历史</span>
<span class="token comment"># --pretty: 美化日志格式，format=oneline | short | full | fuller，还支持format自定义格式化</span>
<span class="token comment"># -n：列出最近几次的提交日志</span>
<span class="token comment"># --since, --after: 时间过滤，从什么时候开始--since=&#39;2022-11-22&#39;</span>
<span class="token comment"># --until, --before: 时间过滤，在什么时候之前--since=&#39;2022-11-22&#39;</span>
<span class="token comment"># --author：作者过滤</span>
<span class="token comment"># ...</span>
<span class="token function">git</span> log <span class="token punctuation">[</span>-p<span class="token operator">|</span>--patch<span class="token punctuation">]</span> <span class="token punctuation">[</span>--stat<span class="token punctuation">]</span> <span class="token punctuation">[</span>--graph<span class="token punctuation">]</span> <span class="token punctuation">[</span>--pretty<span class="token operator">=</span><span class="token operator">&lt;</span>format<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-<span class="token operator">&lt;</span>n<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--since<span class="token operator">=</span> <span class="token operator">|</span> <span class="token parameter variable">--after</span><span class="token operator">=</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--until<span class="token operator">=</span> <span class="token operator">|</span> <span class="token parameter variable">--before</span><span class="token operator">=</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--author<span class="token operator">=</span><span class="token punctuation">]</span>

<span class="token comment"># 一行输出日志信息</span>
<span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline

<span class="token comment"># 自定义格式化输出日志：&quot;哈希值 - 作者名称, 据当下多长时间 : 提交说明&quot;</span>
<span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:<span class="token string">&quot;%h - %an, %ar : %s&quot;</span>
<span class="token comment"># 自定义格式化+分支、合并情况的日志</span>
<span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:<span class="token string">&quot;%h %s&quot;</span> <span class="token parameter variable">--graph</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>创建/切换分支</strong></p><p>创建本地分支可用<code>git branch</code>， 切换本地分支用的HEAD指向可用<code>git switch</code>或<code>git checkout</code>， <strong><code>git checkout</code>不仅能用于创建分支，还可以切换分支。</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建【本地】分支</span>
<span class="token function">git</span> branch <span class="token operator">&lt;</span>local<span class="token operator">&gt;</span>
<span class="token comment"># 切换【本地】分支，即将HEAD指针指向该分支</span>
<span class="token function">git</span> switch <span class="token operator">&lt;</span>local<span class="token operator">&gt;</span>
<span class="token function">git</span> checkout <span class="token operator">&lt;</span>local<span class="token operator">&gt;</span>
<span class="token comment"># 创建并切换【本地】分支，并将HEAD指针指向该分支</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>local<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>合并分支</strong></p><p>Git的合并有两种方式：<code>merge</code>和<code>rebase</code>。它们各有特点，根据不同场景选择使用能够实现较为理想的效果</p><ul><li><p><strong>merge</strong></p><p>当想将检出的分支合并至某一分支中（如<code>main</code>），则可以先切换至该分支<code>main</code>，然后合并检出的分支。</p><p>可能会出现<code>快速前进(fast-forward)</code>，即<strong>当两个分支需要合并时，如果一个分支能够顺着移动到另一个分支，则Git在合并时，只会简单的将指针向前推进</strong>； 合并时也可能会出现冲突，因此需要解决完后，通过<code>git add</code>将文件暂存，确定冲突已解决，再<code>git commit</code>提交此次合并</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token operator">&lt;</span>breach<span class="token operator">&gt;</span>
<span class="token function">git</span> merge <span class="token operator">&lt;</span>target<span class="token operator">&gt;</span>
<span class="token comment"># 可视化合并工具</span>
<span class="token function">git</span> mergetool
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>rebase</strong></p><p><strong>基变</strong>(rebase)是将一个主题分支的修改通过“备份”，依序合并至目标基底分支上，并且丢弃掉主题分支上的所有提交记录，使得分支的提交记录更加地“线性”，更加清晰。</p><p>但是需要注意的是，<strong>如果提交存在于本地仓库之外，而其他人可能基于这些提交进行开发，那么不要执行变基</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将当前分支合并至&lt;basebranch&gt;，如果传入&lt;topicbranch&gt;，则会合并将HEAD指向&lt;topicbranch&gt;</span>
<span class="token comment"># -i：交互模式，能够修改版本提交的顺序。</span>
<span class="token comment"># basebranch：目标基底分支</span>
<span class="token comment"># topicbranch：主题分支</span>
<span class="token function">git</span> rebase <span class="token punctuation">[</span>-i<span class="token operator">|</span>--interactive<span class="token punctuation">]</span> <span class="token operator">&lt;</span>basebranch<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>topicbranch<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>拉取</strong></p><p>主要有两种方式：<code>fetch</code>和<code>pull</code></p><ol><li><code>fetch</code>：拉取远程仓库代码到新分支，不合并当前分支的改动，需要手动merge，因此<code>fetch</code>后常与<code>merge</code>配合使用</li><li><code>pull</code>：拉去远程代码到本地，并自动合并当前改动</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># fetch + merge</span>
<span class="token function">git</span> fetch <span class="token punctuation">[</span>origin <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span><span class="token punctuation">[</span>:<span class="token operator">&lt;</span>local<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--all<span class="token punctuation">]</span>
<span class="token function">git</span> merge <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span>

<span class="token comment"># pull</span>
<span class="token comment"># --rebase：拉取并基变远程仓库到本地，防止他人将基变推送至远程仓库导致记录缺失</span>
<span class="token function">git</span> pull <span class="token punctuation">[</span>--rebase<span class="token punctuation">]</span> <span class="token punctuation">[</span>origin <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>local<span class="token operator">&gt;</span><span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>推送</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 推送提交代码至远程仓库</span>
<span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>删除分支</strong></p><p>删除分支主要使用<code>branch</code>和参数<code>-d/-D</code>控制</p><ol><li><code>-d</code>：常规删除</li><li><code>-D</code>：强制删除，相当于<code>--delete --force</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除【本地】分支</span>
<span class="token comment"># 常规删除</span>
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>local<span class="token operator">&gt;</span>
<span class="token comment"># 强制删除</span>
<span class="token function">git</span> branch <span class="token parameter variable">-D</span> <span class="token operator">&lt;</span>local<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="远程版本库-remote-管理" tabindex="-1"><a class="header-anchor" href="#远程版本库-remote-管理" aria-hidden="true">#</a> 远程版本库(Remote)管理</h4><p>与本地仓库类似，远程仓库也存在分支、标签等，其分支以<code>&lt;remote&gt;/&lt;branch&gt;</code>的形式命名，<code>remote</code>的名称一般为origin，在检出远程分支时也能够重命名。</p><ul><li><p><strong>创建分支</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建并切换分支</span>
<span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>localbranch<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>remotebranch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>删除分支</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除【远程】分支</span>
<span class="token comment"># 常规删除</span>
<span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> <span class="token punctuation">[</span>-d<span class="token operator">|</span>--delete<span class="token punctuation">]</span> <span class="token operator">&lt;</span>localbranch<span class="token operator">&gt;</span>
<span class="token comment"># 强制删除</span>
<span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> <span class="token parameter variable">-D</span> <span class="token operator">&lt;</span>localbranch<span class="token operator">&gt;</span>
<span class="token comment"># 推送空分支</span>
<span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> :<span class="token operator">&lt;</span>localbranch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>跟踪分支</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 当存在本地分支，想远程创建同名分支+跟踪</span>
<span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> <span class="token punctuation">[</span>-u<span class="token operator">|</span>--set-upstream<span class="token punctuation">]</span> <span class="token operator">&lt;</span>local<span class="token operator">&gt;</span>
<span class="token comment"># 当远程存在分支，想本地创建同名分支+跟踪</span>
<span class="token comment"># track：跟踪分支</span>
<span class="token comment"># alias：分支重命名，默认与远程分支相同</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>--track<span class="token punctuation">]</span> <span class="token punctuation">[</span>alias<span class="token punctuation">]</span> <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>remotebranch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="暂存区-index-管理" tabindex="-1"><a class="header-anchor" href="#暂存区-index-管理" aria-hidden="true">#</a> 暂存区(Index)管理</h3><ul><li><strong>撤销操作</strong><ul><li><p>撤销提交，当提交信息填写错误或者漏掉几个文件没有添加至暂存区，因此需要撤销原本的提交，运行带上<code>--amend</code>参数的提交命令即可。 如果自上次提交以来没有做任何修改而执行带<code>--amend</code>参数提交指令，Git会保持原来的快照，只修改提交信息； 如果做了修改，则需要将改动的文件<code>add</code>后，再执行带<code>--amend</code>参数提交指令，这次提交会启动文本编辑器，并显示第一次提交信息， 在此基础上修改后作为第二次提交信息，第二次提交会代替第一次提交的结果。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>对已在暂存区的文件撤销，例如添加两个文件修改至暂存库，需要撤销其中一个文件的改动，则可以使用<code>git reset</code>或<code>git restore</code>；</p></li><li><p>撤销工作区的文件修改，恢复到上一次提交时的样子，使用<code>git reset</code>或<code>git restore</code>也可以实现</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset HEAD <span class="token punctuation">[</span>file1<span class="token punctuation">]</span><span class="token punctuation">..</span>.
<span class="token function">git</span> restore <span class="token punctuation">[</span>file1<span class="token punctuation">]</span><span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="进阶使用" tabindex="-1"><a class="header-anchor" href="#进阶使用" aria-hidden="true">#</a> 进阶使用</h2><h3 id="git-hook" tabindex="-1"><a class="header-anchor" href="#git-hook" aria-hidden="true">#</a> Git Hook</h3><p>钩子(Hook)一般是在执行特定动作时触发一些自定义脚本，Git中的钩子存放在<code>.git/hooks</code>目录下，当初始化Git仓库后，会默认存放后缀为<code>.sample</code>的钩子示例。 若需要开启，只需要移除这个后缀即可。</p><p>Git中存在两大类钩子：<code>客户端钩子</code>和<code>服务端钩子</code>。客户端钩子主要用于提交合并前后的操作。服务端钩子主要用于接收被推送的提交的联网操作。</p><ul><li>客户端钩子 <ul><li>提交工作流钩子 <ul><li><strong><code>pre-commit</code></strong>：在输入提交信息前运行。它用于检查即将提交的快照，常用于查找受否存在遗漏，测试运行是否正常，代码编写是否规范等等...</li><li><strong><code>prepare-commit-msg</code></strong>：在启动提交信息编辑器之前，默认信息被创建之后运行。常与提交信息模板搭配使用，动态插入信息</li><li><strong><code>commit-msg</code></strong>：在提交信息时的运行。如果以钩子脚本非零值退出，Git将放弃提交。常用于在提交通过前验证项目状态或提交信息</li><li><strong><code>post-commit</code></strong>：在整个提交过程完成后运行。一般用于通知之类的事情</li></ul></li><li>电子邮件工作流钩子 <ul><li><strong><code>applypatch-msg</code></strong></li><li><strong><code>applypatch-msg</code></strong></li><li><strong><code>post-applypatch</code></strong></li></ul></li><li>其它客户端钩子 <ul><li><strong><code>pre-rebase</code></strong></li><li><strong><code>post-rewrite</code></strong></li><li><strong><code>post-checkout</code></strong></li><li><strong><code>post-merge</code></strong></li><li><strong><code>pre-push</code></strong></li></ul></li></ul></li><li>服务端钩子 <ul><li><strong><code>pre-receive</code></strong></li><li><strong><code>update</code></strong></li><li><strong><code>post-receive</code></strong></li></ul></li></ul><h2 id="团队协作流程" tabindex="-1"><a class="header-anchor" href="#团队协作流程" aria-hidden="true">#</a> 团队协作流程</h2><figure><img src="`+m+`" alt="Git团队协作开发流" tabindex="0" loading="lazy"><figcaption>Git团队协作开发流</figcaption></figure><p>目前主流的Git团队协作开发主要用主分支<code>master|main</code>和开发分支<code>develop</code>来记录开发历史，而开发者的所有开发活动都基于开发分支上进行。</p><ul><li><code>master</code>：主分支，也可以命名为<code>main</code>（<code>main</code>的命名是因为BLM运动而出现），这是仓库最主要、最稳定的代码版本，一般只有管理员有写入权限，用于保存发布版本历史，顺便打标签。</li><li><code>develop</code>：开发分支，一般各种开发活动最终需要集成到该分支。后续考虑代码版本发布时，会基于该分支检出一个发布分支并进行版本发布</li><li><code>feature</code>：功能开发分支，命名一般为<code>feature/xxx</code>。基于<code>develop</code>分支检出（相当于父分支为<code>develop</code>），开发完成后需要合并至<code>develop</code>，一般会出现冲突，需要处理完冲突再进行合并。</li><li><code>hotfix</code>：紧急修复分支，命名一般为<code>hotfix/xxx</code>，唯一可以基于<code>master</code>分支检出的分支，修复完后需要合并回<code>master</code>和<code>develop</code>分支，并且在<code>master</code>打好标签。</li><li><code>release</code>：发布分支，用于向外发布指定版本。</li></ul><h3 id="传统协作流" tabindex="-1"><a class="header-anchor" href="#传统协作流" aria-hidden="true">#</a> 传统协作流</h3><ul><li><p><strong>新的功能(feature)</strong></p><p>每个新功能应该有独立的分支进行开发，这样能够在不干扰开发分支develop的前提下进行本地开发，开发完成后再合并回开发分支即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 一般来说，远程仓库会优先创建好develop分支，用于日常开发。</span>
<span class="token comment"># 开发者只需要基于develop分支创建feature分支进行开发，可选择性地在远程中创建跟踪分支</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature/xxx develop
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin feature/xxx

<span class="token comment"># 开发完成后，需要合并至develop分支（可能会出现冲突，出现则需要解决）</span>
<span class="token comment"># 1. 先在本地仓库提交修改</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;feat:xxx&quot;</span>

<span class="token comment"># 2. 更新远程develop分支</span>
<span class="token function">git</span> pull origin develop

<span class="token comment"># 3. 合并feat分支至本地develop分支（可能需要处理冲突）</span>
<span class="token function">git</span> checkout develop
<span class="token function">git</span> merge --no-ff feature/xxx

<span class="token comment"># 4. 推送至远程develop分支</span>
<span class="token function">git</span> push origin develop

<span class="token comment"># 5. 删除本地和远程分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> feature/xxx
<span class="token function">git</span> push origin <span class="token parameter variable">-d</span> feature/xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>新的发布版本(release)</strong></p><p>发布前的准备，包括一些清理工作、全面的测试、文档的更新以及任何其他的准备工作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 基于develop分支检出一个新分支用于版本发布</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>VERSION<span class="token operator">&gt;</span> develop

<span class="token comment"># 发布前的工作完成后，需要将分支合并至main和develop中，最后删除本地的发布分支</span>
<span class="token function">git</span> checkout main
<span class="token function">git</span> merge <span class="token operator">&lt;</span>VERSION<span class="token operator">&gt;</span>
<span class="token function">git</span> push

<span class="token function">git</span> checkout develop
<span class="token function">git</span> merge <span class="token operator">&lt;</span>VERSION<span class="token operator">&gt;</span>
<span class="token function">git</span> push

<span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>VERSION<span class="token operator">&gt;</span>

<span class="token comment"># 当合并至主分支main中，需要打上合适的标签</span>
<span class="token function">git</span> tag <span class="token parameter variable">-a</span> <span class="token operator">&lt;</span>VERSION<span class="token operator">&gt;</span> <span class="token parameter variable">-m</span> <span class="token string">&quot;xxx&quot;</span> main
<span class="token function">git</span> push <span class="token parameter variable">--tags</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>新的修复补丁(hotfix)</strong></p><p>当主分支出现漏洞，需要从该分支中检出修复分支，将漏洞修复完成后再合并至主分支，<strong>同时也要合并至开发分支</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> hotfix/xxx master

<span class="token function">git</span> checkout master
<span class="token function">git</span> merge hotfix/xxx
<span class="token function">git</span> push

<span class="token function">git</span> checkout develop
<span class="token function">git</span> merge hotfix/xxx
<span class="token function">git</span> push
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> hotfix/xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="高效协作流-git-flow" tabindex="-1"><a class="header-anchor" href="#高效协作流-git-flow" aria-hidden="true">#</a> 高效协作流：Git Flow</h3><p>在Git中，简单地封装了一个指令<code>git flow</code>，用于创建标准的工作流，如果熟悉Git的工作流，可以完全不需要这个指令。 这个指令可以让我们更方便地进行工作流管理</p><figure><img src="`+v+`" alt="git flow工具" tabindex="0" loading="lazy"><figcaption>git flow工具</figcaption></figure><ul><li><p><strong>初始化Git Flow工作流</strong></p><p>初始化Git工作流，主要是配置master、develop、feature、relase、hotfix等分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> flow init <span class="token punctuation">[</span>-d <span class="token operator">|</span> -f<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>新的功能(feature)</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 开始新Feature的开发工作 </span>
<span class="token function">git</span> flow feature start <span class="token operator">&lt;</span>NAME<span class="token operator">&gt;</span>
<span class="token comment"># 发布Feature分支，相当于push至远程开发分支</span>
<span class="token function">git</span> flow feature publish <span class="token operator">&lt;</span>NAME<span class="token operator">&gt;</span>
<span class="token comment"># 从远程仓库获取发布的Feature</span>
<span class="token function">git</span> flow feature pull origin <span class="token operator">&lt;</span>NAME<span class="token operator">&gt;</span>
<span class="token comment"># 完成并关闭Feature分支</span>
<span class="token function">git</span> flow feature finish <span class="token operator">&lt;</span>NAME<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>新的发布版本(release)</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 开始一个Release分支</span>
<span class="token function">git</span> flow release start <span class="token operator">&lt;</span>VERSION<span class="token operator">&gt;</span> <span class="token punctuation">[</span>BASE<span class="token punctuation">]</span>
<span class="token comment"># 发布一个Release</span>
<span class="token function">git</span> flow release publish <span class="token operator">&lt;</span>VERSION<span class="token operator">&gt;</span>
<span class="token comment"># 结束Release</span>
<span class="token function">git</span> flow release finish <span class="token operator">&lt;</span>VERSION<span class="token operator">&gt;</span>
<span class="token comment"># 给主分支打标签</span>
<span class="token function">git</span> tag <span class="token parameter variable">-a</span> <span class="token operator">&lt;</span>VERSION<span class="token operator">&gt;</span> <span class="token parameter variable">-m</span> <span class="token string">&quot;xxx&quot;</span> main
<span class="token function">git</span> push <span class="token parameter variable">--tags</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>新的修复补丁(hotfix)</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 开始一个Hotfix</span>
<span class="token function">git</span> flow hotfix start <span class="token operator">&lt;</span>VERSION<span class="token operator">&gt;</span> <span class="token punctuation">[</span>BASENAME<span class="token punctuation">]</span>
<span class="token comment"># 结束一个Hotfix</span>
<span class="token function">git</span> flow hotfix finish <span class="token operator">&lt;</span>VERSION<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="代码提交规范" tabindex="-1"><a class="header-anchor" href="#代码提交规范" aria-hidden="true">#</a> 代码提交规范</h3><h4 id="主流的规范" tabindex="-1"><a class="header-anchor" href="#主流的规范" aria-hidden="true">#</a> 主流的规范</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>type<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>scope<span class="token operator">&gt;</span><span class="token punctuation">)</span>: <span class="token operator">&lt;</span>subject<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>footer<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用主流的Angular代码提交规范（如上代码块），主要分为三个部分:</p><ol><li><p><strong>Header（标题行）</strong>：必填，描述主要<strong>修改类型</strong>和<strong>内容</strong></p><ul><li><p><strong>type</strong>：commit类型</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>feat: 新功能、新特性
fix: 修改bug
perf: 更改代码，性能优化
refactor: 代码重构（重构，在不影响代码内部行为、功能下的代码修改）
docs: 文档修改
style: 代码格式修改, 注意不是 css 修改（例如分号修改）
test: 测试用例新增、修改
build: 影响项目构建或依赖项修改
revert: 恢复上一次提交
ci: 持续集成相关文件修改
chore: 其他修改（不在上述类型中的修改）
release: 发布新版本
workflow: 工作流相关文件修改
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>scope</strong>：说明commit影响的范围</p><p>说明commit影响的范围，如global, common, route, component, utils, build...</p></li><li><p><strong>subject</strong>：commit的简要说明</p><p>简要说明commit的内容</p></li></ul></li><li><p><strong>Body（主题内容）</strong>：详细描述做了什么样的修改，为什么修改，以及开发的思路...</p></li><li><p><strong>Footer（页脚注释）</strong>：可以写注释，引用Issues...</p></li></ol><h4 id="提交信息检测配置-husky-commmitizen-commitlint" tabindex="-1"><a class="header-anchor" href="#提交信息检测配置-husky-commmitizen-commitlint" aria-hidden="true">#</a> 提交信息检测配置(husky+commmitizen+commitlint)</h4><p>工具:</p><ul><li><code>husky</code>：主流Git Hook工具，Vue工程集成的是<code>yorkie</code></li><li><code>commitizen</code>：Git Commit Message规范工具</li><li><code>cz-conventional-changelog</code>：传统日志</li><li><code>cz-customizable</code>：自定义提交日志，需要配置</li><li><code>@commitlint/config-conventional</code>：检测Git提交</li><li><code>@commitlint/cli</code>：检测Git提交脚手架</li></ul><h4 id="前置安装" tabindex="-1"><a class="header-anchor" href="#前置安装" aria-hidden="true">#</a> 前置安装</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># git hook工具</span>
<span class="token function">npm</span> i husky <span class="token parameter variable">-D</span>
npx husky-init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="预提交配置" tabindex="-1"><a class="header-anchor" href="#预提交配置" aria-hidden="true">#</a> 预提交配置</h4><ol><li><p>自动生成提交内容</p><p>安装相关工具</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 规范 commit message 的工具</span>
<span class="token function">npm</span> i <span class="token parameter variable">-g</span> commitizen
<span class="token comment"># 使用传统commit规范提示</span>
npx commitizen init cz-conventional-changelog --save-dev
<span class="token comment"># 传统commit规范package.json配置</span>
<span class="token string">&quot;config&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;commitizen&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;./node_modules/cz-conventional-changelog&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment"># （可选）使用自定义的commit规范提示，同时需要在根目录下新建.cz-config.js文件</span>
<span class="token function">npm</span> i cz-customizable --save-dev
<span class="token comment"># 传统commit规范package.json配置</span>
<span class="token string">&quot;config&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;commitizen&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;./node_modules/cz-customizable&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置自定义提交<code>.cz-config.js</code>文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可选类型</span>
  <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;feat&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;feat:     新功能&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;fix&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;fix:      修复&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;docs&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;docs:     文档变更&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;style&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;style:    代码格式(不影响代码运行的变动)&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;refactor&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;refactor: 重构(既不是增加feature，也不是修复bug)&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;perf&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;perf:     性能优化&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;test:     增加测试&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;chore&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;chore:    构建过程或辅助工具的变动&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;revert&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;revert:   回退&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;build:    打包&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 消息步骤</span>
  <span class="token literal-property property">messages</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;请选择提交类型:&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">customScope</span><span class="token operator">:</span> <span class="token string">&quot;请输入修改范围(可选):&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">subject</span><span class="token operator">:</span> <span class="token string">&quot;请简要描述提交(必填):&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&quot;请输入详细描述(可选):&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">footer</span><span class="token operator">:</span> <span class="token string">&quot;请输入要关闭的issue(可选):&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">confirmCommit</span><span class="token operator">:</span> <span class="token string">&quot;确认使用以上信息提交？(y/n/e/h)&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 跳过问题</span>
  <span class="token literal-property property">skipQuestions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;footer&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">subjectLimit</span><span class="token operator">:</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token comment">// subject文字长度默认是72</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>指令替换</p><p>配置完成后，提交信息则使用<code>git cz</code>替代<code>git commit -m</code></p></li></ol><h4 id="提交信息检测" tabindex="-1"><a class="header-anchor" href="#提交信息检测" aria-hidden="true">#</a> 提交信息检测</h4><ol><li><p>安装相关工具</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 检测 commit message 的工具</span>
<span class="token function">npm</span> i @commitlint/config-conventional @commitlint/cli <span class="token parameter variable">-D</span>
<span class="token comment"># 在根目录下新建创建commitlint.config.js文件+添加配置</span>
<span class="token string">&quot;config&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;commitizen&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;./node_modules/cz-conventional-changelog&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment"># 创建commit-msg钩子</span>
npx husky <span class="token function">add</span> .husky/commit-msg
<span class="token comment"># .husky/commit-msg文件添加</span>
npx --no-install commitlint <span class="token parameter variable">--edit</span> <span class="token variable">$1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置<code>commitlint.config.js</code>文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@commitlint/config-conventional&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;type-enum&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;upd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;feat&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fix&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;refactor&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;docs&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;chore&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;style&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;revert&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;type-case&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;type-empty&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;scope-empty&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;scope-case&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;subject-full-stop&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;never&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;subject-case&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;never&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;header-max-length&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="工具" tabindex="-1"><a class="header-anchor" href="#工具" aria-hidden="true">#</a> 工具</h2>`,53),j=n("strong",null,"独立软件",-1),H={href:"https://www.sourcetreeapp.com/",target:"_blank",rel:"noopener noreferrer"},I=n("strong",null,"IDE插件",-1),B={href:"https://www.gitkraken.com/gitlens",target:"_blank",rel:"noopener noreferrer"},R=n("strong",null,"NPM依赖",-1),C={href:"https://www.npmjs.com/package/husky",target:"_blank",rel:"noopener noreferrer"},D={href:"https://www.npmjs.com/package/commitizen",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.npmjs.com/package/cz-customizable",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.npmjs.com/package/@commitlint/cli",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.npmjs.com/package/@commitlint/config-conventional",target:"_blank",rel:"noopener noreferrer"},T=n("h2",{id:"学习-练手资源",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#学习-练手资源","aria-hidden":"true"},"#"),s(" 学习/练手资源")],-1),F={href:"https://learngitbranching.js.org/?locale=zh_CN",target:"_blank",rel:"noopener noreferrer"},P=n("h2",{id:"参考文档",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考文档","aria-hidden":"true"},"#"),s(" 参考文档")],-1),U={href:"https://www.cnblogs.com/lcngu/p/5770288.html",target:"_blank",rel:"noopener noreferrer"},W={href:"https://zhuanlan.zhihu.com/p/48148269",target:"_blank",rel:"noopener noreferrer"},K={href:"https://zhuanlan.zhihu.com/p/423859270",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"};function Y(Z,$){const a=i("ExternalLinkIcon");return p(),l("div",null,[c(" markdownlint-disable line_length "),g,b,n("p",null,[h,s("是"),n("a",f,[s("Linus Torvalds"),e(a)]),s("为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件")]),x,n("p",null,[s("前往"),n("a",y,[s("Git"),e(a)]),s("官网下载安装包，默认安装即可")]),q,n("ul",null,[_,n("li",null,[w,n("ul",null,[n("li",null,[s("找到并打开"),G,s("，找到"),S,s("项("),n("a",z,[s("https://github.com/settings/keys"),e(a)]),s(")")]),E,N])]),A]),V,n("ul",null,[n("li",null,[j,n("ul",null,[n("li",null,[n("a",H,[s("SourceTree"),e(a)])])])]),n("li",null,[I,n("ul",null,[n("li",null,[n("a",B,[s("GitLens"),e(a)])])])]),n("li",null,[R,n("ul",null,[n("li",null,[n("a",C,[s("husky"),e(a)]),s("：Git Hook工具")]),n("li",null,[n("a",D,[s("commitizen"),e(a)]),s("：提交前交互生成message工具")]),n("li",null,[n("a",L,[s("cz-customizable"),e(a)]),s("：提交前交互提示自定义工具")]),n("li",null,[s("commitlint "),n("ul",null,[n("li",null,[n("a",M,[s("@commitlint/cli"),e(a)]),s("：提交前message规范检测工具")]),n("li",null,[n("a",O,[s("@commitlint/config-conventional"),e(a)]),s("：提交前message自定义规范工具")])])])])])]),T,n("p",null,[n("a",F,[s("Learn Git Branching"),e(a)])]),P,n("ol",null,[n("li",null,[n("a",U,[s("git flow的使用"),e(a)])]),n("li",null,[n("a",W,[s("对比Git与SVN，这篇讲的很易懂"),e(a)])]),n("li",null,[n("a",K,[s("SVN vs. Git: 2021年哪个适合你"),e(a)])]),n("li",null,[n("a",Q,[s("Pro Git"),e(a)])])])])}const nn=o(k,[["render",Y],["__file","git.html.vue"]]);export{nn as default};
