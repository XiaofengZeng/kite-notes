import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as r,c as p,f as d,b as n,a,w as o,d as s,e}from"./app-S7AmktQN.js";const u="/kite-notes/assets/install-1-WAPGfRNV.png",m="/kite-notes/assets/install-2-w-YS_iMj.png",v="/kite-notes/assets/global-config-1-8w7ODvfX.png",k="/kite-notes/assets/global-config-2-RvE2tmJ-.png",b="/kite-notes/assets/global-config-3-bc623dNo.png",h="/kite-notes/assets/global-config-5-mvozUxXK.png",g="/kite-notes/assets/global-config-6-b_2xh52Z.png",_="/kite-notes/assets/global-config-7-0aCXio2U.png",f="/kite-notes/assets/global-config-8-rTOgBo4v.png",A="/kite-notes/assets/global-config-9-RY8wXHg6.png",E="/kite-notes/assets/build-view-1-OeBca7aX.png",T="/kite-notes/assets/build-view-2-yHgSk48b.png",j="/kite-notes/assets/system-config-1-U62BhM3K.png",x="/kite-notes/assets/post-proccess-1-hoG3-4sc.png",S={},J=n("h1",{id:"jenkins",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jenkins","aria-hidden":"true"},"#"),s(" Jenkins")],-1),P=n("p",null,[n("u",null,"Jenkins是一个独立的开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。 前身是Hudson是一个可扩展的持续集成引擎。可用于自动化各种任务，如构建，测试和部署软件。 Jenkins可以通过本机系统包Docker安装，甚至可以通过安装Java Runtime Environment的任何机器独立运行。"),n("sup",null,"1")],-1),R=n("h2",{id:"安装-部署",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装-部署","aria-hidden":"true"},"#"),s(" 安装+部署")],-1),M=n("h3",{id:"安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装","aria-hidden":"true"},"#"),s(" 安装")],-1),N=n("h4",{id:"_1-war包安装-liunx",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-war包安装-liunx","aria-hidden":"true"},"#"),s(" 1. war包安装（Liunx）")],-1),I=n("li",null,[n("p",null,[s("准备Jenkins安装包"),n("code",null,"jenkins.war")])],-1),$=e(`<p>准备Jenkins启动/停止脚本（/）</p><ul><li>启动脚本<code>jenkins-start.sh</code></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash </span>
<span class="token comment">#Configs</span>
<span class="token assign-left variable">WAR_NAME</span><span class="token operator">=</span>jenkins.war
<span class="token assign-left variable">WAR_PATH</span><span class="token operator">=</span>/opt/software/jenkins/
<span class="token assign-left variable">WAR_FILE</span><span class="token operator">=</span><span class="token variable">$WAR_PATH</span>/<span class="token variable">$WAR_NAME</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;authorize .sh&quot;</span>
<span class="token function">chmod</span> <span class="token number">775</span> <span class="token variable">$WAR_FILE</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;open jenkins port 8020&quot;</span>
firewall-cmd --add-port<span class="token operator">=</span><span class="token number">8020</span>/tcp <span class="token parameter variable">--permanent</span>
firewall-cmd <span class="token parameter variable">--reload</span>

<span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> <span class="token variable">$WAR_PATH</span>/jenkins.war <span class="token parameter variable">--httpPort</span><span class="token operator">=</span><span class="token number">8020</span> <span class="token operator">&gt;</span> <span class="token variable">$WAR_PATH</span>/jenkins.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),B=n("code",null,"jenkins-stop.sh",-1),w=n("li",null,[n("p",null,[s("执行启动脚本"),n("code",null,"jenkins-start.sh")])],-1),C=e(`<h4 id="_2-docker安装-liunx-2" tabindex="-1"><a class="header-anchor" href="#_2-docker安装-liunx-2" aria-hidden="true">#</a> 2. Docker安装（Liunx）<sup>2</sup></h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查找jenkins镜像</span>
<span class="token function">docker</span> search jenkins

<span class="token comment"># 选择并拉取适合本机环境的jenkins镜像,以jenkins/jenkins:latest为例</span>
<span class="token function">docker</span> pull jenkins/jenkins:latest

<span class="token comment"># 创建宿主挂在目录</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/env/docker/jenkins_home
<span class="token function">chmod</span> <span class="token number">777</span> /opt/env/docker/jenkins_home
<span class="token comment"># 创建并运行容器实例</span>
<span class="token comment"># -p 10240:8080 ===&gt; 端口映射，后续使用10240端口访问jenkins主页面</span>
<span class="token comment"># -p 10241:50000 ===&gt; 端口映射</span>
<span class="token comment"># -v /opt/env/docker/jenkins_home:/var/jenkins_home ===&gt; jenkins主目录挂载目录绑定</span>
<span class="token comment"># -v /etc/localtime:/etc/localtime ===&gt; 容器使用和服务器同样的时间设置</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> 
  <span class="token parameter variable">--name</span> jenkins <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">10240</span>:8080 <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">10241</span>:50000 <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /opt/env/docker/jenkins_home:/var/jenkins_home <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime <span class="token punctuation">\\</span>
  jenkins/jenkins

<span class="token comment"># 运行成功后，通过{IP}:{PORT}访问主界面</span>
<span class="token comment"># 例如：192.168.1.36:10240</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="部署" tabindex="-1"><a class="header-anchor" href="#部署" aria-hidden="true">#</a> 部署</h3><h4 id="通过浏览器客户端对jenkins进行可视化部署" tabindex="-1"><a class="header-anchor" href="#通过浏览器客户端对jenkins进行可视化部署" aria-hidden="true">#</a> 通过浏览器客户端对Jenkins进行可视化部署</h4><ul><li>输入初始密码（初始密码可以从<code>jenkins-start.sh</code>脚本输出的<code>log</code>日志中查看，也可通过<code>cat/vi/vim</code>指令对下图红框文件使用进行查看）</li></ul><figure><img src="`+u+'" alt="部署-初始密码" tabindex="0" loading="lazy"><figcaption>部署-初始密码</figcaption></figure><ul><li>安装插件时，选择推荐插件进行安装</li></ul><figure><img src="'+m+'" alt="部署-推荐插件" tabindex="0" loading="lazy"><figcaption>部署-推荐插件</figcaption></figure><ul><li><p>注册Jenkins管理员账户</p></li><li><p>集成插件安装（安装完成后，需要重启Jenkins。也可以在安装插件过程中，<strong>勾选自动重启</strong>）</p><ul><li><strong>NodeJS Plugin</strong></li><li><strong>Subversion Plug-in</strong></li><li><strong>Maven Integration plugin</strong></li><li><strong>Publish Over SSH</strong></li></ul></li></ul><h4 id="全局配置-配置构建环境" tabindex="-1"><a class="header-anchor" href="#全局配置-配置构建环境" aria-hidden="true">#</a> 全局配置（配置构建环境）</h4><p><strong>构建集成环境可以使用本地环境，也可以使用Jenkins自主选择安装环境</strong></p><ul><li>Maven配置（本地环境；注意，有两处需要配置）</li></ul><figure><img src="'+v+'" alt="Maven配置1" tabindex="0" loading="lazy"><figcaption>Maven配置1</figcaption></figure><figure><img src="'+k+'" alt="Maven配置2" tabindex="0" loading="lazy"><figcaption>Maven配置2</figcaption></figure><ul><li>JDK配置（本地环境）</li></ul><figure><img src="'+b+'" alt="JDK配置" tabindex="0" loading="lazy"><figcaption>JDK配置</figcaption></figure><ul><li>NodeJS配置（本地环境；该配置项需要安装完NodeJS Plugin插件才会出现）</li></ul><figure><img src="'+h+'" alt="NodeJS配置" tabindex="0" loading="lazy"><figcaption>NodeJS配置</figcaption></figure><ul><li>凭证配置（分<code>SVN</code>和<code>Git</code>配置） <ul><li><p>通用步骤（找到账号凭证配置）</p><p><img src="'+g+'" alt="账号凭证项" title="账号凭证项" loading="lazy"><img src="'+_+'" alt="全局凭证" title="全局凭证" loading="lazy"></p></li><li><p><code>SVN</code></p><figure><img src="'+f+'" alt="账号凭证配置" tabindex="0" loading="lazy"><figcaption>账号凭证配置</figcaption></figure></li><li><p><code>Git</code></p><figure><img src="'+A+'" alt="账号凭证配置" tabindex="0" loading="lazy"><figcaption>账号凭证配置</figcaption></figure></li></ul></li></ul><h2 id="项目构建" tabindex="-1"><a class="header-anchor" href="#项目构建" aria-hidden="true">#</a> 项目构建</h2><p>在Jenkins中，存在视图和项目两个重要的概念。项目是一个个独立的构建项，而视图可以存放着许多构建项，即项目的容器。每个构建项中有许多配置项，如<code>源码管理</code>、<code>构建触发器</code>、<code>构建环境</code>、<code>构建预处理</code>，<code>构建后处理</code>等等操作</p><h3 id="视图构建" tabindex="-1"><a class="header-anchor" href="#视图构建" aria-hidden="true">#</a> 视图构建</h3><p><img src="'+E+'" alt="&quot;构建视图&quot;" title="构建视图" loading="lazy"><img src="'+T+`" alt="&quot;构建视图&quot;" title="构建视图" loading="lazy"></p><h3 id="项目构建-通用操作" tabindex="-1"><a class="header-anchor" href="#项目构建-通用操作" aria-hidden="true">#</a> 项目构建-通用操作</h3><ul><li>源码管理。填入源码地址+凭证</li><li>在【<strong>构建触发器</strong>】标签页中勾选<code>触发远程构建</code>、<code>Poll SCM</code>，<code>Build after orther projects are built</code>选项是构建情况而定（构建后端资源需要，构建前端资源不需要） <ul><li><p><code>触发远程构建</code>：可通过<code>&lt;JENKINS_URL&gt;/job/&lt;ITEM_NAME&gt;/build?token=&lt;TOKEN&gt;</code>的方式进行远程构建，不需要进入Jenkins管理界面</p></li><li><p><code>Poll SCM</code>：计划构建，用于定时检查源码变更并构建</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 该语句会输出上次一的构建时间以及下一次的将要构建的时间    </span>
H <span class="token number">1</span> * * *
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="后端项目构建" tabindex="-1"><a class="header-anchor" href="#后端项目构建" aria-hidden="true">#</a> 后端项目构建</h3>`,26),H=n("li",null,[n("p",null,[s("设置完通用操作后，在【"),n("strong",null,"Build"),s("】标签页中，设置"),n("code",null,"Goals and options"),s("配置项")]),n("ul",null,[n("li",null,[n("code",null,"clean install"),s("：即先清理原有的再构建新的")]),n("li",null,[n("code",null,"clean package -DskipTests"),s("：即先清理原有的再打包，同时不执行测试用例")])])],-1),y=n("p",null,"注意构建代码前后处理",-1),O=e(`<li><p>构建代码后处理：移动JAR包到指定目录，重启启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment"># 构建名称</span>
<span class="token assign-left variable">ITEM_NAME</span><span class="token operator">=</span>my-jar
<span class="token comment"># 目标存放目录</span>
<span class="token assign-left variable">TARGET_PATH</span><span class="token operator">=</span>/home/jar

<span class="token comment"># 复制JAR包到指定目录下，并统一名称</span>
<span class="token function">cp</span> /root/.jenkins/workspace/<span class="token variable">$ITEM_NAME</span>/target/<span class="token variable">$ITEM_NAME</span>-0.0.1-SNAPSHOT.jar <span class="token variable">$TARGET_PATH</span>/<span class="token variable">$ITEM_NAME</span>.jar
<span class="token comment"># 启动JAR包，打印输出日志文件</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;start <span class="token variable">$ITEM_NAME</span>&quot;</span>
<span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> <span class="token variable">$TARGET_PATH</span>/<span class="token variable">$ITEM_NAME</span>.jar <span class="token operator">&gt;</span> <span class="token variable">$TARGET_PATH</span>/out/<span class="token variable">$ITEM_NAME</span>.out <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),D=e(`<h3 id="前端项目构建" tabindex="-1"><a class="header-anchor" href="#前端项目构建" aria-hidden="true">#</a> 前端项目构建</h3><ul><li>设置完通用操作后，1. 在【<strong>构建环境</strong>】勾选<code>Provide Node &amp; npm bin/ folder to PATH</code> ，即使用先前在jenkins中配置好的node环境</li><li>在【构建】标签页中，添加执行Shell脚本 <ul><li><p>构建代码后处理：移动构建后的文件夹到指定目录（一般是应用服务器[如<code>Tomcat</code>]的目录，具体由应用服务器的配置决定）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment"># 构建名称</span>
<span class="token assign-left variable">ITEM_NAME</span><span class="token operator">=</span>my-frontend
<span class="token comment"># 前端工程名称</span>
<span class="token assign-left variable">PROJRCT_NAME</span><span class="token operator">=</span>my-nest
<span class="token comment"># 前端工程后名称</span>
<span class="token assign-left variable">PROJECT_ALIAS</span><span class="token operator">=</span>nest
<span class="token comment"># 静态目录</span>
<span class="token assign-left variable">STATIC_PATH</span><span class="token operator">=</span>/home/nest
<span class="token comment"># npm构建脚本</span>
<span class="token assign-left variable">BUILD_SCRIPT</span><span class="token operator">=</span>build:<span class="token variable">$PROJECT_ALIAS</span>
<span class="token comment">#DATE=$(date +%Y%m%d%H%M%S)</span>

<span class="token builtin class-name">cd</span> /root/.jenkins/workspace/<span class="token variable">$ITEM_NAME</span>/<span class="token variable">$PROJRCT_NAME</span>

<span class="token comment">#TODO: 时间备份</span>
<span class="token comment">#mv $STATIC_PATH/$PROJECT_ALIAS $STATIC_PATH/$PROJECT_ALIAS/$DATE</span>

<span class="token comment"># 依赖安装+构建</span>
<span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">npm</span> run <span class="token variable">$BUILD_SCRIPT</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">exit</span> <span class="token number">0</span>
<span class="token keyword">else</span>
  <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable">$STATIC_PATH</span>/<span class="token variable">$PROJECT_ALIAS</span>
    <span class="token comment">#cp -r /root/.jenkins/workspace/$ITEM_NAME/$PROJRCT_NAME/$PROJECT_ALIAS $STATIC_PATH</span>
    <span class="token function">find</span> ./<span class="token variable">$PROJECT_ALIAS</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-vE</span> <span class="token string">&quot;/.svn|/.git&quot;</span> <span class="token operator">|</span> cpio <span class="token parameter variable">-pdm</span> <span class="token variable">$STATIC_PATH</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="构建后处理-可选-3" tabindex="-1"><a class="header-anchor" href="#构建后处理-可选-3" aria-hidden="true">#</a> 构建后处理（可选）<sup>3</sup></h3><p>构建后处理比较常用的操作是文件传输+文件路径的改变+程序启动，需要用到先前安装的插件<strong>Publish Over SSH</strong></p><h4 id="配置远程连接" tabindex="-1"><a class="header-anchor" href="#配置远程连接" aria-hidden="true">#</a> 配置远程连接</h4><p>前往【系统配置】，找到【Publish over SSH】配置项的【SSH Servers】小项</p><ul><li><p>配置连接信息，保存即可</p><figure><img src="`+j+'" alt="配置连接信息" tabindex="0" loading="lazy"><figcaption>配置连接信息</figcaption></figure></li><li><p>在构建项目中配置【构建后操作】操作</p><ul><li>Source files：需要传输的文件/文件夹</li><li>Remove prefix：需要移除的目录前缀，基于Source files路径</li><li>Remote directory：远程的目录（默认为远程用户的目录，root -&gt; /root）</li><li>Exec command：需要执行的操作</li></ul><figure><img src="'+x+'" alt="构建后操作" tabindex="0" loading="lazy"><figcaption>构建后操作</figcaption></figure></li></ul><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>',8),L={href:"https://www.w3cschool.cn/jenkins/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://blog.csdn.net/qq359605040/article/details/117692609",target:"_blank",rel:"noopener noreferrer"},q={href:"https://juejin.cn/post/7067790095767568397#heading-16",target:"_blank",rel:"noopener noreferrer"};function F(W,G){const l=t("RouterLink"),i=t("ExternalLinkIcon");return r(),p("div",null,[J,P,R,d(` ### 环境准备

- [前提条件-JDK安装+配置](../os_linux/sh.md#jdk环境-安装-配置)
- [前端-Node安装+配置](../os_linux/sh.md#node环境-安装-配置)
- [后端-Maven安装+配置](../os_linux/sh.md#maven环境-安装-配置) `),M,N,n("ul",null,[I,n("li",null,[$,n("ul",null,[n("li",null,[a(l,{to:"/os_linux/sh.html#%E6%A3%80%E6%9F%A5%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%B9%B6%E6%9D%80%E6%AD%BB%E5%AF%B9%E5%BA%94%E8%BF%9B%E7%A8%8B"},{default:o(()=>[s("停止脚本")]),_:1}),B])])]),w]),C,n("ul",null,[H,n("li",null,[y,n("ul",null,[n("li",null,[n("p",null,[s("构建代码前处理：主要是判断该JAR包的端口是否存在，存在则杀死->"),a(l,{to:"/os_linux/sh.html#%E6%A3%80%E6%9F%A5%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%B9%B6%E6%9D%80%E6%AD%BB%E5%AF%B9%E5%BA%94%E8%BF%9B%E7%A8%8B"},{default:o(()=>[s("Shell脚本")]),_:1})])]),O])])]),D,n("ol",null,[n("li",null,[n("a",L,[s("Jenkins中文文档-W3C School"),a(i)])]),n("li",null,[n("a",z,[s("Docker安装Jenkins详细教程"),a(i)])]),n("li",null,[n("a",q,[s("基于Docker安装Jenkins，并配置使用Jenkins打包Node前后端服务部署到远程服务器"),a(i)])])])])}const U=c(S,[["render",F],["__file","jenkins.html.vue"]]);export{U as default};
