import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as r,e as l}from"./app-nlX3gzzp.js";const i={},o=l('<h1 id="proxy和reflect" tabindex="-1"><a class="header-anchor" href="#proxy和reflect" aria-hidden="true">#</a> Proxy和Reflect</h1><h2 id="proxy" tabindex="-1"><a class="header-anchor" href="#proxy" aria-hidden="true">#</a> Proxy</h2><ul><li>相当于“代理”，作为“拦截器”使用，对被拦截的对象进行相关自定义操作</li><li>支持13种操作/应用场景： <ul><li><strong>get(target, propKey, receiver)</strong><ul><li>现数组读取倒序</li><li>实现链式操作</li><li>DOM通用节点创建</li></ul></li><li><strong>set(target, propKey, value, receiver)</strong>： 属性需可配置（configurable）以及可写（writable） <ul><li>控制私有属性不被修改</li></ul></li><li><strong>has(target, propKey)</strong></li><li><strong>deleteProperty(target, propKey)</strong></li><li><strong>ownKeys(target)</strong></li><li><strong>getOwnPropertyDescriptor(target, propKey)</strong></li><li><strong>defineProperty(target, propKey, propDesc)</strong></li><li><strong>preventExtensions(target)</strong></li><li><strong>getPrototypeOf(target)</strong></li><li><strong>isExtensible(target)</strong></li><li><strong>setPrototypeOf(target, proto)</strong></li><li><strong>apply(target, object, args)</strong></li><li><strong>construct(target, args)</strong></li></ul></li></ul><h2 id="reflect" tabindex="-1"><a class="header-anchor" href="#reflect" aria-hidden="true">#</a> Reflect</h2><p>Reflect 是便于操作对象</p><ul><li>将部分Object的方法放置到Reflect对象上</li><li>修改某些Object方法的返回时，是之更加合理</li><li>让Objcet的一些命令操作变成函数行为</li><li>Reflect的静态方法与Proxy操作方法一一对应，有利于Proxy对象调用Rflect方法（完成默认行为，作为修改行为的基础）</li><li>支持13种静态方法： <ul><li>Reflect.apply(target, thisArg, args)</li><li>Reflect.construct(target, args)</li><li>Reflect.get(target, name, receiver)</li><li>Reflect.set(target, name, value, receiver)</li><li>Reflect.defineProperty(target, name, desc)</li><li>Reflect.deleteProperty(target, name)</li><li>Reflect.has(target, name)</li><li>Reflect.ownKeys(target)</li><li>Reflect.isExtensible(target)</li><li>Reflect.preventExtensions(target)</li><li>Reflect.getOwnPropertyDescriptor(target, name)</li><li>Reflect.getPrototypeOf(target)</li><li>Reflect.setPrototypeOf(target, prototype)</li></ul></li></ul>',6),a=[o];function n(s,c){return t(),r("div",null,a)}const f=e(i,[["render",n],["__file","Proxy-and-Reflect.html.vue"]]);export{f as default};
