import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as n,e as s}from"./app-5hxSoQGh.js";const o={},c=s(`<h1 id="olcesium源码剖析" tabindex="-1"><a class="header-anchor" href="#olcesium源码剖析" aria-hidden="true">#</a> OLCesium源码剖析</h1><h2 id="olcesium简介" tabindex="-1"><a class="header-anchor" href="#olcesium简介" aria-hidden="true">#</a> OLCesium简介</h2><h3 id="版本情况" tabindex="-1"><a class="header-anchor" href="#版本情况" aria-hidden="true">#</a> 版本情况</h3><ul><li>OLCesium@2.16.0</li><li>Openlayers@7.4.0</li><li>Cesium@1.111.0</li></ul><p>OLCesium主要是用于二三维场景的同步切换，由Openlayers团队进行维护，主要提供：</p><ol><li>二三维场景视图同步切换</li><li>一系列的同步器，二维影像以及矢量数据同步至三维场景。同时支持开发者自定义同步器</li></ol><p>那么，这样既能带来一些优势也会有一些缺陷：</p><ul><li>优势 <ul><li>串联Openlayers和Cesium，实现共存的“二三维一体化”</li><li>将Openlayers中加载数据自动同步至Cesium当中，不需要在三维场景中重新加载</li></ul></li><li>劣势 <ul><li>二三维切换过程没有动画，切换比较生硬</li><li>数据同步是单向的（Openlayers -&gt; Cesium），三维中数据无法同步至二维场景中（不过按照场景逻辑来说，确实不应该同步至二维）</li></ul></li></ul><h2 id="olcesium的使用" tabindex="-1"><a class="header-anchor" href="#olcesium的使用" aria-hidden="true">#</a> OLCesium的使用</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装OLCesium</span>
<span class="token function">npm</span> <span class="token function">install</span> olcs <span class="token parameter variable">-S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>OLCesium的使用是很简单的，但是有两个前提：</p><ol><li>需要Openlayers的Map实例对象作为参数传入OLCesium的构造函数</li><li>需要将Cesium挂载在全局变量中（很多技术文档也建议将Cesium挂载在全局变量中，方便访问或调试功能）</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Map <span class="token keyword">from</span> <span class="token string">&#39;ol/Map&#39;</span>
<span class="token keyword">import</span> OlCesium <span class="token keyword">from</span> <span class="token string">&#39;olcs/OlCesium&#39;</span>

<span class="token comment">// OpenLayers的Map实例对象</span>
<span class="token keyword">const</span> ol2dMap <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 地图对象的配置项</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 实例化OLCesium对象</span>
<span class="token keyword">const</span> ol3d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OLCesium</span><span class="token punctuation">(</span><span class="token punctuation">{</span> 
  <span class="token literal-property property">map</span><span class="token operator">:</span> ol2dMap<span class="token punctuation">,</span>  <span class="token comment">// 必选项，需要在Cesium场景中展示的Openlayers地图对象</span>
  <span class="token comment">// target: element,       // 可选项，Cesium容器挂载的元素，传入则实现与Openlayers容器并列显示，不传入则是覆盖当前Openlayers地图对象所在的容器。默认是不传入</span>
  <span class="token comment">// createSynchronizers: function1,  // 可选项，自定义同步器</span>
  <span class="token comment">// time: function2,  // 可选项，传入的时间作为Cesium的动画时间</span>
  <span class="token comment">// stopOpenLayersEventsPropagation: boolean, //  可选项，是否在三维场景中阻止Opeenlayers的事件冒泡</span>
  <span class="token comment">// sceneOptions: object,  //  可选项，场景配置，用于实例化Cesium.Scene对象</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 切换至三维场景</span>
ol3d<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码剖析" tabindex="-1"><a class="header-anchor" href="#源码剖析" aria-hidden="true">#</a> 源码剖析</h2><h3 id="_1-场景切换-setenabled方法" tabindex="-1"><a class="header-anchor" href="#_1-场景切换-setenabled方法" aria-hidden="true">#</a> 1. 场景切换（setEnabled方法）</h3><p>setEnabled本质上就是更改元素标签的样式，将元素显示或隐藏。从二维切换至三维时，将Openlayers的交互事件暂存到OLCesium的<code>pausedInteractions_</code>属性中，并更改二维地图对象的<code>addInteractuon</code>和<code>removeInteraction</code>方法，针对<code>pausedInteractions_</code>的增加/移除地图交互；当从三维切换回二维时，将<code>pausedInteractions_</code>中的所有交互重新添加至<code>map.getInteractions()</code>中，最后根据场景的切换重新渲染地图</p><p>总的来说，在实现切换场景的同时，将当前的地图交互暂存或恢复，减少重复操作</p><h3 id="_2-同步器" tabindex="-1"><a class="header-anchor" href="#_2-同步器" aria-hidden="true">#</a> 2. 同步器</h3><h4 id="_2-1-抽象同步器-abstractsynchronizer" tabindex="-1"><a class="header-anchor" href="#_2-1-抽象同步器-abstractsynchronizer" aria-hidden="true">#</a> 2.1 抽象同步器（AbstractSynchronizer）</h4><p><code>AbstractSynchronizer</code>是<code>VectorSynchronizer</code>和<code>RasterSynchronizer</code>的基类，主要提供了：</p><ol><li>同步方法<code>synchronize()</code>。在初始化OLCesium实例对象时，会将提供的参数中的map对象中的图层进行同步，使得在二维场景添加图层时能够自动添加<code>addLayers_()</code>同步</li><li>重写图层更改（修改/移除）时的监听器，主要是图层集<code>Collection</code>的<code>add</code>、<code>remove</code>、<code>change:zIndex</code>事件，图层<code>Layer</code>的<code>change</code>事件等</li><li>图层排序<code>orderLayers</code>，具体实现在子类当中</li></ol><p>其子类需要实现以下方法：</p><ul><li><code>addCesiumObject()</code></li><li><code>destroyCesiumObject()</code></li><li><code>removeSingleCesiumObject()</code></li><li><code>removeAllCesiumObjects()</code></li><li><code>createSingleLayerCounterparts()</code></li></ul><h4 id="_2-1-矢量数据同步器-vectorsynchronizer" tabindex="-1"><a class="header-anchor" href="#_2-1-矢量数据同步器-vectorsynchronizer" aria-hidden="true">#</a> 2.1 矢量数据同步器（VectorSynchronizer）</h4><p>针对Openlayers当前地图中存在的<strong>矢量数据</strong>进行同步：</p><ol><li>提供了一个<code>FeatureConverter</code>实例，用于将Openlayers中各种类型数量数据的转换至Cesium的Primitive</li><li>通过一个<code>Cesium.PrimitiveCollectoion</code>对象将同步的数据进行统一管理</li><li>在同步器中增加了对Openlayers的数据源<code>source</code>的事件监听，包括<code>change:visible</code>、<code>addfeature</code>、<code>removefeature</code>、<code>changefeature</code>用于Cesium对各种feature的显影、增删改同步（PS：<code>changefeature</code>的事件监听是将feature删除再重新新增来实现change响应，对一些业务逻辑可能不适用，如实时数据）</li></ol><h3 id="_2-2-栅格-影像-数据同步器-rastersynchronizer" tabindex="-1"><a class="header-anchor" href="#_2-2-栅格-影像-数据同步器-rastersynchronizer" aria-hidden="true">#</a> 2.2 栅格（影像）数据同步器（RasterSynchronizer）</h3><p>针对Openlayers当前地图中存在的<strong>栅格数据</strong>进行同步：</p><ol><li>对内通过<code>Cesium.ImageryLayerCollection</code>对象将同步的数据进行统一管理；对外将同步的数据添加至<code>scene.imageryLayers</code>中</li><li>同步方法<code>tileLayerToImageryLayer()</code>，将瓦片图层对应添加至Cesium中，只支持<code>EPSG:3857</code>和<code>EPSG:4326</code>，若图层源是这两者之一，则会通过<code>olcsCoreOLImageryProvider()</code>创建一个<code>Cesium.ImageryProvider</code>的派生类，用于连接<code>ol.source.TileImage</code>数据（PS：Openlayers的影像数据往往会是不同的坐标系，不一定完全支持<code>EPSG:3857</code>或<code>EPSG:4326</code>，因此需要拓展Cesium对坐标系的支持或者对影像数据进行处理，使之能够正常加载）</li></ol><h4 id="_2-3-overlay数据同步器-overlaysynchronizer" tabindex="-1"><a class="header-anchor" href="#_2-3-overlay数据同步器-overlaysynchronizer" aria-hidden="true">#</a> 2.3 Overlay数据同步器（OverlaySynchronizer）</h4><p>独立于矢量数据同步器和栅格数据同步器，自己实现了同步机制：</p><ol><li>同步方法<code>synchronize()</code>，移除原有的所有Overlay，再重新遍历添加Overlay，同时重写<code>add</code>和<code>remove</code>的事件处理函数</li><li>添加单个Overlay的<code>addOverlay()</code>，通过<code>new olcsSynchronizedOverlay()</code>，基于传入的Overlay对象进行同步，Overlay本质上是一个<code>Element</code>元素，因此，添加对应事件监听即可，<code>change:position</code>、<code>change:element</code>、<code>change:offset</code>、<code>change:positioning</code>事件</li></ol><h3 id="_3-自定义属性-olcs-xxx" tabindex="-1"><a class="header-anchor" href="#_3-自定义属性-olcs-xxx" aria-hidden="true">#</a> 3. 自定义属性（&#39;olcs-xxx&#39;）</h3><p>OLCesium提供了很多以<code>olcs_</code>为前缀的定制化属性，用于一些使用场景的处理，这些属性都是设置在source对象中：</p><ul><li><code>olcs_skip</code>：跳过数据同步操作（只在二维场景显示，三维场景不显示）</li><li><code>olcs_model</code>：将数量数据同步成模型，是一个对象格式，必须传入<code>url</code>，<code>scale</code>、<code>minimumPixelSize</code>、<code>heightReference</code>可选传入</li><li><code>olcs_shadows</code>：阴影投射，需要<code>scnen.shadowMap</code>启动</li><li><code>olcs_minimumLevel</code>：设置允许瓦片数据最大缩放层级</li><li><code>olcs_extruded_height</code>：对面图层的拉高处理</li><li><code>olcs_provider</code>：</li><li><code>olcs_cancellers</code>：</li></ul><h2 id="todo-逆向同步器" tabindex="-1"><a class="header-anchor" href="#todo-逆向同步器" aria-hidden="true">#</a> TODO-逆向同步器</h2>`,36),i=[c];function d(l,r){return a(),n("div",null,i)}const u=e(o,[["render",d],["__file","source-code-of-OLCesium.html.vue"]]);export{u as default};
