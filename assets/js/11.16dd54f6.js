(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{267:function(a,e,t){a.exports=t.p+"assets/img/simplify-dp.aa401773.gif"},268:function(a,e,t){a.exports=t.p+"assets/img/simplify-vw.d2ad01c4.jpg"},315:function(a,e,t){"use strict";t.r(e);var r=t(13),v=Object(r.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"「算法」抽稀-概化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#「算法」抽稀-概化"}},[a._v("#")]),a._v(" 「算法」抽稀（概化）")]),a._v(" "),e("h2",{attrs:{id:"背景-应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#背景-应用场景"}},[a._v("#")]),a._v(" 背景/应用场景")]),a._v(" "),e("p",[a._v("随着对海量地理空间数据加载、渲染的需求日益增加。在地理信息系统中，对一些细节程度高的数据在地图上的展示往往需要绘制大量的坐标点，当地图缩放层级较小时，并不需要将所有的点都绘制出来，因为全部绘制出来往往会存在性能问题，因此，可通过"),e("strong",[a._v("抽稀算法")]),a._v("，将不重要的点舍弃掉，那么系统对矢量数据加载的处理性能将得以提高，同时不影响视觉效果。")]),a._v(" "),e("h2",{attrs:{id:"抽稀算法类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#抽稀算法类型"}},[a._v("#")]),a._v(" 抽稀算法类型")]),a._v(" "),e("p",[a._v("抽稀，也称作概化。"),e("u",[a._v("抽稀算法的关键是定义"),e("strong",[a._v("抽稀因子")]),a._v("，抽稀因子的不同决定了抽稀算法的多样性。在现有抽稀理论中，有按步长，线段长度，垂距等来定义抽稀因子。")]),e("sup",[a._v("1")]),a._v("在GIS领域，比较常用的抽稀算法是"),e("strong",[a._v("Ramer-Douglas-Peucker")]),a._v("算法（基于距离）和"),e("strong",[a._v("Visvalingam-Whyatt")]),a._v("算法（基于面积）。")]),a._v(" "),e("h3",{attrs:{id:"ramer-douglas-peucker-道格拉斯-普克"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ramer-douglas-peucker-道格拉斯-普克"}},[a._v("#")]),a._v(" Ramer-Douglas-Peucker（道格拉斯-普克）")]),a._v(" "),e("p",[a._v("从整体角度来考虑一条完整曲线或一段具体线段，思路为：")]),a._v(" "),e("ol",[e("li",[a._v("确定距离阈值"),e("code",[a._v("D")]),a._v("，即抽稀因子，作为判断是否抽稀的指标")]),a._v(" "),e("li",[a._v("对曲线的首末两点虚连一条直线，计算曲线每个点到虚直线的距离，找到最大距离"),e("code",[a._v("Dmax")]),a._v("，判断其距离与距离阈值"),e("code",[a._v("D")]),a._v("的关系")]),a._v(" "),e("li",[a._v("如果"),e("code",[a._v("Dmax < D")]),a._v("，则舍弃该曲线的所有中间点，将虚直线作为抽稀后的线段")]),a._v(" "),e("li",[a._v("如果"),e("code",[a._v("Dmax >= D")]),a._v("，则找到"),e("code",[a._v("Dmax")]),a._v("在曲线上的对应的点作为分割点将当前曲线分割为两段，继续对这两条线段进行"),e("code",[a._v("第2步")]),a._v("操作（即递归处理，直至所有"),e("code",[a._v("Dmax < D")]),a._v("，则处理完毕）")])]),a._v(" "),e("p",[e("img",{attrs:{src:t(267),alt:"Ramer-Douglas-Peucker思路可视化"}})]),a._v(" "),e("p",[a._v("上图说明（可对应思路说明进行理解）：")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("黑色曲线")]),a._v("：表示抽稀前的曲线")]),a._v(" "),e("li",[e("strong",[a._v("浅蓝色直线")]),a._v("：表示虚直线")]),a._v(" "),e("li",[e("strong",[a._v("深蓝色直线")]),a._v("：表示抽稀后的曲线")]),a._v(" "),e("li",[e("strong",[a._v("最大值对应点（红色）")]),a._v("：表示"),e("code",[a._v("Dmax < D")]),a._v("，可以舍弃该曲线的所有中间点")]),a._v(" "),e("li",[e("strong",[a._v("最大值对应点（绿色）")]),a._v("：表示"),e("code",[a._v("Dmax >= D")]),a._v("，需要进行曲线分割并重新处理")])]),a._v(" "),e("h3",{attrs:{id:"visvalingam-whyatt"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#visvalingam-whyatt"}},[a._v("#")]),a._v(" Visvalingam-Whyatt")]),a._v(" "),e("p",[a._v("是一种渐进式的抽稀方式，思路为：")]),a._v(" "),e("ol",[e("li",[a._v("确定距离阈值"),e("code",[a._v("A")]),a._v("，即抽稀因子，作为判断是否抽稀的指标")]),a._v(" "),e("li",[a._v("在一条曲线中，计算由三个连续的点所形成三角形面积，找到这些三角中的最小面积"),e("code",[a._v("Amin")]),a._v("，判断其面积与面积阈值"),e("code",[a._v("A")]),a._v("的关系")]),a._v(" "),e("li",[a._v("如果"),e("code",[a._v("Amin < A")]),a._v("，则删除该面积对应三角形中的中间顶点，继续对剩下的顶点所形成的曲线进行"),e("code",[a._v("第2步")]),a._v("操作（即递归处理，直至所有"),e("code",[a._v("Amin > A")]),a._v("，则处理完毕）")])]),a._v(" "),e("p",[e("img",{attrs:{src:t(268),alt:"Visvalingam-Whyatt思路可视化"}})]),a._v(" "),e("h3",{attrs:{id:"ramer-douglas-peucker和visvalingam-whyatt的算法区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ramer-douglas-peucker和visvalingam-whyatt的算法区别"}},[a._v("#")]),a._v(" Ramer-Douglas-Peucker和Visvalingam-Whyatt的算法区别")]),a._v(" "),e("ol",[e("li",[e("code",[a._v("Ramer-Douglas-Peucker")]),a._v("算法的优点是计算简单，但它的结果可能会出现自相交")]),a._v(" "),e("li",[e("code",[a._v("Ramer-Douglas-Peucker")]),a._v("计算效率更高，它的时间复杂度是"),e("code",[a._v("O(n^2)")]),a._v("，"),e("code",[a._v("Visvalingam-Whyatt")]),a._v("的时间复杂度是"),e("code",[a._v("O(n·log(n))")]),a._v("。")]),a._v(" "),e("li",[e("code",[a._v("Ramer-Douglas-Peucker")]),a._v("算法的阈值是距离，"),e("code",[a._v("Visvalingam-Whyatt")]),a._v("算法的阈值是面积")]),a._v(" "),e("li",[a._v("相比起"),e("code",[a._v("Ramer-Douglas-Peucker")]),a._v("算法的选取保留点，"),e("code",[a._v("Visvalingam-Whyatt")]),a._v("算法是选取删除点")]),a._v(" "),e("li",[a._v("相比起"),e("code",[a._v("Ramer-Douglas-Peucker")]),a._v("算法，"),e("code",[a._v("Visvalingam-Whyatt")]),a._v("算法产生的角度变化更小，更能保留几何面的特征，更加适用于河流、森林或海岸线等自然线条或多边形特征的抽稀")])]),a._v(" "),e("h2",{attrs:{id:"拓扑问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拓扑问题"}},[a._v("#")]),a._v(" 拓扑问题")]),a._v(" "),e("p",[a._v("概化数据可能会破坏数据的拓扑关系，因此，可以先将数据转化为拓扑结构，再对拓扑数据进行数据概化（抽稀）")]),a._v(" "),e("h2",{attrs:{id:"实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[a._v("#")]),a._v(" 实现")]),a._v(" "),e("h3",{attrs:{id:"已有实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#已有实现"}},[a._v("#")]),a._v(" 已有实现")]),a._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://mapshaper.org/",target:"_blank",rel:"noopener noreferrer"}},[a._v("mapshaper -simlpify"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"http://mourner.github.io/simplify-js/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Simply.js"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://openlayers.org/en/latest/apidoc/module-ol_geom_Geometry-Geometry.html#simplify",target:"_blank",rel:"noopener noreferrer"}},[a._v("OpenpLayers —— ol/geom/Geometry -> simplify(tolerance)"),e("OutboundLink")],1)]),a._v(" "),e("li",[a._v("QGIS —— MenuBar -> Vector -> Geometry Tools -> Simplify")]),a._v(" "),e("li",[a._v("QGIS —— ToolBox-> GRass -> Vector -> v.generalize")])]),a._v(" "),e("h2",{attrs:{id:"参考文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[a._v("#")]),a._v(" 参考文档")]),a._v(" "),e("ol",[e("li",[e("p",[e("a",{attrs:{href:"https://baike.baidu.com/item/%E6%8A%BD%E7%A8%80/7297123",target:"_blank",rel:"noopener noreferrer"}},[a._v("抽稀-百度百科"),e("OutboundLink")],1)])]),a._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/dbt8ZNFJ7TuVoGX5u1xWmw",target:"_blank",rel:"noopener noreferrer"}},[a._v("空间数据量大怎么办，三种方式告诉你怎么抽稀"),e("OutboundLink")],1)])]),a._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/355323735",target:"_blank",rel:"noopener noreferrer"}},[a._v("常用的地图数据概化算法：Douglas-Peucker与Visvalingam-Whyatt"),e("OutboundLink")],1)])]),a._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://ignf.github.io/CartAGen/docs/algorithms/line/visvalingam.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Description of Visvalingam & Whyatt Line Simplification Algorithm"),e("OutboundLink")],1)])])])])}),[],!1,null,null,null);e.default=v.exports}}]);