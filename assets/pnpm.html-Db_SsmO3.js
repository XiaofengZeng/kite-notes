const e=JSON.parse('{"key":"v-01c910df","path":"/front-end/package-manager-tool/pnpm.html","title":"pnpm","lang":"zh-CN","frontmatter":{"index":false,"icon":"laptop-code","category":["JavaScript"],"date":"2022-08-07T00:00:00.000Z","description":"pnpm 1. npmp简介 1.1 pnpm特点 【无痛切换】与npm/yarn等主流包管理工具的使用类似，易于上手 【节省磁盘空间并提升安装速度】采用统一的包管理目录对机器所安装的所有包进行管理 项目需要依赖时首先会去该目录下检索，存在则复用，没有则新添加至统一包管理目录； 如果是相同的依赖但不同版本时，只会检索该依赖下不同的依赖进行添加； 【非扁平的 node_modules 目录】依赖使用硬链接(hard-link)和符号链接(symbolic link)进行相互关联 在项目的node_modules目录中存在.pnpm目录，以及同级的、使用符号连接的依赖目录 .pnpm目录下面的部分依赖硬链接至统一包管理目录，而.pnpm目录同级的以来则是使用符号链接对依赖进行引用 【多栖环境】pnpm可以不需要对node的环境有太多依赖，因为自身可以设置使用node的具体版本","head":[["meta",{"property":"og:url","content":"https://xiaofengzeng.github.io/kite-notes/front-end/package-manager-tool/pnpm.html"}],["meta",{"property":"og:site_name","content":"kite-notes"}],["meta",{"property":"og:title","content":"pnpm"}],["meta",{"property":"og:description","content":"pnpm 1. npmp简介 1.1 pnpm特点 【无痛切换】与npm/yarn等主流包管理工具的使用类似，易于上手 【节省磁盘空间并提升安装速度】采用统一的包管理目录对机器所安装的所有包进行管理 项目需要依赖时首先会去该目录下检索，存在则复用，没有则新添加至统一包管理目录； 如果是相同的依赖但不同版本时，只会检索该依赖下不同的依赖进行添加； 【非扁平的 node_modules 目录】依赖使用硬链接(hard-link)和符号链接(symbolic link)进行相互关联 在项目的node_modules目录中存在.pnpm目录，以及同级的、使用符号连接的依赖目录 .pnpm目录下面的部分依赖硬链接至统一包管理目录，而.pnpm目录同级的以来则是使用符号链接对依赖进行引用 【多栖环境】pnpm可以不需要对node的环境有太多依赖，因为自身可以设置使用node的具体版本"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xiaofengzeng.github.io/kite-notes/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-27T08:16:27.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"pnpm"}],["meta",{"property":"article:author","content":"Kite.Zeng"}],["meta",{"property":"article:published_time","content":"2022-08-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-27T08:16:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"pnpm\\",\\"image\\":[\\"https://xiaofengzeng.github.io/kite-notes/\\"],\\"datePublished\\":\\"2022-08-07T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-27T08:16:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kite.Zeng\\"}]}"]]},"headers":[{"level":2,"title":"1. npmp简介","slug":"_1-npmp简介","link":"#_1-npmp简介","children":[{"level":3,"title":"1.1 pnpm特点","slug":"_1-1-pnpm特点","link":"#_1-1-pnpm特点","children":[]},{"level":3,"title":"1.2 pnpm与npm/yarn的区别(优势)1,2","slug":"_1-2-pnpm与npm-yarn的区别-优势-1-2","link":"#_1-2-pnpm与npm-yarn的区别-优势-1-2","children":[]},{"level":3,"title":"1.3 pnpm的弊端2","slug":"_1-3-pnpm的弊端2","link":"#_1-3-pnpm的弊端2","children":[]}]},{"level":2,"title":"2. 安装与配置","slug":"_2-安装与配置","link":"#_2-安装与配置","children":[]},{"level":2,"title":"3. 常用 CLI 操作","slug":"_3-常用-cli-操作","link":"#_3-常用-cli-操作","children":[{"level":3,"title":"3.1 添加/移除/更新","slug":"_3-1-添加-移除-更新","link":"#_3-1-添加-移除-更新","children":[]},{"level":3,"title":"3.2 清理","slug":"_3-2-清理","link":"#_3-2-清理","children":[]},{"level":3,"title":"3.3 运行脚本","slug":"_3-3-运行脚本","link":"#_3-3-运行脚本","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1703664987000,"updatedTime":1703664987000,"contributors":[{"name":"XiaofengZeng","email":"zengxf12123@163.com","commits":1}]},"readingTime":{"minutes":3.82,"words":1145},"filePathRelative":"front-end/package-manager-tool/pnpm.md","localizedDate":"2022年8月7日","excerpt":"<h1> pnpm</h1>\\n<h2> 1. npmp简介</h2>\\n<h3> 1.1 pnpm特点</h3>\\n<ul>\\n<li>\\n<p><mark>【无痛切换】</mark>与<code>npm</code>/<code>yarn</code>等主流包管理工具的使用类似，易于上手</p>\\n</li>\\n<li>\\n<p><mark>【节省磁盘空间并提升安装速度】</mark>采用<code>统一的包管理目录</code>对机器所安装的所有包进行管理</p>\\n<ul>\\n<li>项目需要依赖时首先会去该目录下检索，存在则复用，没有则新添加至统一包管理目录；</li>\\n<li>如果是相同的依赖但不同版本时，只会检索该依赖下不同的依赖进行添加；</li>\\n</ul>\\n</li>\\n<li>\\n<p><mark>【非扁平的 node_modules 目录】</mark>依赖使用<code>硬链接(hard-link)</code>和<code>符号链接(symbolic link)</code>进行相互关联</p>\\n<ul>\\n<li>在项目的<code>node_modules</code>目录中存在<code>.pnpm</code>目录，以及同级的、使用符号连接的依赖目录</li>\\n<li><code>.pnpm</code>目录下面的部分依赖<u>硬链接</u>至<code>统一包管理目录</code>，而<code>.pnpm</code>目录同级的以来则是使用<u>符号链接</u>对依赖进行引用</li>\\n</ul>\\n</li>\\n<li>\\n<p><mark>【多栖环境】</mark>pnpm可以不需要对node的环境有太多依赖，因为自身可以设置使用node的具体版本</p>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
