import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as n,e as s}from"./app-S7AmktQN.js";const t={},i=s(`<h1 id="对象的拓展" tabindex="-1"><a class="header-anchor" href="#对象的拓展" aria-hidden="true">#</a> 对象的拓展</h1><ul><li>Object.is()，是对ES5的<code>==</code>和<code>===</code>的完善</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment">// false</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象操作方法" tabindex="-1"><a class="header-anchor" href="#对象操作方法" aria-hidden="true">#</a> 对象操作方法</h2><ul><li>Object.assign()，合并对象（必须是<strong>可枚举</strong>的）并将同名属性进行覆盖 <ul><li>第一参数是目标对象，后续参数可以一直传</li><li>支持浅拷贝</li><li>支持同名属性覆盖</li><li>使用场景 <ul><li>添加属性/方法</li><li>克隆对象（浅拷贝）</li></ul></li></ul></li><li>Object.getOwnPropertyDescriptor()，返回单个属性的属性描述对象</li><li>Object.getOwnPropertyDescriptors()，返回整个对象自身属性（非继承属性）的属性描述对象</li><li>Object.keys()，返回自身属性（不含继承）的键名</li><li>Object.values()，返回自身属性（不含继承）的键值</li><li>Object.entries()，返回自身属性（非 Symbol 值的属性）的键值对数组（二维数组） <ul><li>可遍历对象属性</li><li>可将对象转换成Map结构</li></ul></li><li>Object.fromEntries()，将键值对数组转换成对象（Object.entries()的逆操作） <ul><li>可获取url的queryString：<code>URLSearchParams(&#39;foo=bar&amp;baz=qux&#39;)</code></li></ul></li></ul><h2 id="原型操作方法" tabindex="-1"><a class="header-anchor" href="#原型操作方法" aria-hidden="true">#</a> 原型操作方法</h2><ul><li>Object.setPrototypeOf(obj)：设置对象的原型对象</li><li>Object.getPrototypeOf(obj, proto)：获取对象的原型对象</li><li>Object.create(proto，objDescriptor)，根据某一对象为原型，创建一个对象</li></ul>`,7),l=[i];function o(c,r){return a(),n("div",null,l)}const d=e(t,[["render",o],["__file","extension-of-object.html.vue"]]);export{d as default};
