import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as o,e as a}from"./app-5hxSoQGh.js";const e={},t=a(`<h1 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> Symbol</h1><p>Symbol 是一个类似字符串的基本类型（JavaScript的第七个基本类型），用于防止对象相同属性重冲突。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> s3 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>调用<code>symbol</code>函数不能使用<code>new</code>关键字</p></li><li><p>参数可以是字符串或者是对象，对象则会调用<code>toString</code>方法后的返回值作为symbol值，参数即是Symbol的描述，可通过<code>.description</code>获取</p></li><li><p>相同参数名的symbol值是不一样的，因此也保证了唯一性</p></li><li><p>symbol值不能进行计算，会报错</p></li><li><p>支持转成字符串/布尔值，不能转化成数值</p></li><li><p><strong>Symbol 值作为对象属性名是，不能用点运算符</strong></p></li><li><p><strong>Symbol可以定义一组常量，保证这组常量的值都是不相等的</strong></p></li><li><p>有利于消除“魔术字符串”（魔术字符串指的是，在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值）</p></li><li><p>不支持<code>for...in</code>、<code>for...of</code>、<code>Object.keys()</code>、<code>Object.values()</code>、<code>Object.entries()</code>、<code>Object.getOwnPropertyNames()</code>获取/遍历Symbol值，但提供了<code>Object.getOwnPropetySymbols()</code>获取对象所有Symbol名。因此可以<strong>为对象定义非私有但内部需要使用的变量</strong></p></li><li><p><code>Reflect.ownKeys()</code>可以获取对象的所有属性名（包括常规键名和 Symbol 键名）</p></li><li><p>Symbol.for()，会从全局Symbol注册表中查找，如果没有则生成一个，有则返回对应的Symbol</p></li><li><p>Symbol.keyFor()，返回已经登记的Symbol的描述descriptor</p></li></ul>`,4),c=[t];function l(p,i){return s(),o("div",null,c)}const u=n(e,[["render",l],["__file","Symbol.html.vue"]]);export{u as default};
