const e=JSON.parse('{"key":"v-2236187c","path":"/gis/algorithms/simplify.html","title":"抽稀（概化）","lang":"zh-CN","frontmatter":{"description":"抽稀（概化） 背景/应用场景 随着对海量地理空间数据加载、渲染的需求日益增加。在地理信息系统中，对一些细节程度高的数据在地图上的展示往往需要绘制大量的坐标点，当地图缩放层级较小时，并不需要将所有的点都绘制出来，因为全部绘制出来往往会存在性能问题，因此，可通过抽稀算法，将不重要的点舍弃掉，那么系统对矢量数据加载的处理性能将得以提高，同时不影响视觉效果。 抽稀算法类型 抽稀，也称作概化。抽稀算法的关键是定义抽稀因子，抽稀因子的不同决定了抽稀算法的多样性。在现有抽稀理论中，有按步长，线段长度，垂距等来定义抽稀因子。1在GIS领域，比较常用的抽稀算法是Ramer-Douglas-Peucker算法（基于距离）和Visvalingam-Whyatt算法（基于面积）。","head":[["meta",{"property":"og:url","content":"https://xiaofengzeng.github.io/kite-notes/gis/algorithms/simplify.html"}],["meta",{"property":"og:site_name","content":"kite-notes"}],["meta",{"property":"og:title","content":"抽稀（概化）"}],["meta",{"property":"og:description","content":"抽稀（概化） 背景/应用场景 随着对海量地理空间数据加载、渲染的需求日益增加。在地理信息系统中，对一些细节程度高的数据在地图上的展示往往需要绘制大量的坐标点，当地图缩放层级较小时，并不需要将所有的点都绘制出来，因为全部绘制出来往往会存在性能问题，因此，可通过抽稀算法，将不重要的点舍弃掉，那么系统对矢量数据加载的处理性能将得以提高，同时不影响视觉效果。 抽稀算法类型 抽稀，也称作概化。抽稀算法的关键是定义抽稀因子，抽稀因子的不同决定了抽稀算法的多样性。在现有抽稀理论中，有按步长，线段长度，垂距等来定义抽稀因子。1在GIS领域，比较常用的抽稀算法是Ramer-Douglas-Peucker算法（基于距离）和Visvalingam-Whyatt算法（基于面积）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xiaofengzeng.github.io/kite-notes/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-27T09:34:27.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"抽稀（概化）"}],["meta",{"property":"article:author","content":"Kite.Zeng"}],["meta",{"property":"article:modified_time","content":"2023-12-27T09:34:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"抽稀（概化）\\",\\"image\\":[\\"https://xiaofengzeng.github.io/kite-notes/\\"],\\"dateModified\\":\\"2023-12-27T09:34:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kite.Zeng\\"}]}"]]},"headers":[{"level":2,"title":"背景/应用场景","slug":"背景-应用场景","link":"#背景-应用场景","children":[]},{"level":2,"title":"抽稀算法类型","slug":"抽稀算法类型","link":"#抽稀算法类型","children":[{"level":3,"title":"Ramer-Douglas-Peucker（道格拉斯-普克）","slug":"ramer-douglas-peucker-道格拉斯-普克","link":"#ramer-douglas-peucker-道格拉斯-普克","children":[]},{"level":3,"title":"Visvalingam-Whyatt","slug":"visvalingam-whyatt","link":"#visvalingam-whyatt","children":[]},{"level":3,"title":"Ramer-Douglas-Peucker和Visvalingam-Whyatt的算法区别","slug":"ramer-douglas-peucker和visvalingam-whyatt的算法区别","link":"#ramer-douglas-peucker和visvalingam-whyatt的算法区别","children":[]}]},{"level":2,"title":"拓扑问题","slug":"拓扑问题","link":"#拓扑问题","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[{"level":3,"title":"已有实现","slug":"已有实现","link":"#已有实现","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1703669667000,"updatedTime":1703669667000,"contributors":[{"name":"XiaofengZeng","email":"zengxf12123@163.com","commits":1}]},"readingTime":{"minutes":3.58,"words":1074},"filePathRelative":"gis/algorithms/simplify.md","localizedDate":"2023年12月27日","excerpt":"<h1> 抽稀（概化）</h1>\\n<h2> 背景/应用场景</h2>\\n<p>随着对海量地理空间数据加载、渲染的需求日益增加。在地理信息系统中，对一些细节程度高的数据在地图上的展示往往需要绘制大量的坐标点，当地图缩放层级较小时，并不需要将所有的点都绘制出来，因为全部绘制出来往往会存在性能问题，因此，可通过<strong>抽稀算法</strong>，将不重要的点舍弃掉，那么系统对矢量数据加载的处理性能将得以提高，同时不影响视觉效果。</p>\\n<h2> 抽稀算法类型</h2>\\n<p>抽稀，也称作概化。<u>抽稀算法的关键是定义<strong>抽稀因子</strong>，抽稀因子的不同决定了抽稀算法的多样性。在现有抽稀理论中，有按步长，线段长度，垂距等来定义抽稀因子。</u><sup>1</sup>在GIS领域，比较常用的抽稀算法是<strong>Ramer-Douglas-Peucker</strong>算法（基于距离）和<strong>Visvalingam-Whyatt</strong>算法（基于面积）。</p>","autoDesc":true}');export{e as data};
