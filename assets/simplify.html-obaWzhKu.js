import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as l,c as n,b as e,d as a,a as r,e as s}from"./app-5hxSoQGh.js";const c="/kite-notes/assets/simplify-dp-dhNoRrnK.gif",d="/kite-notes/assets/simplify-vw-wgM-p2_N.jpg",h={},g=s('<h1 id="抽稀-概化" tabindex="-1"><a class="header-anchor" href="#抽稀-概化" aria-hidden="true">#</a> 抽稀（概化）</h1><h2 id="背景-应用场景" tabindex="-1"><a class="header-anchor" href="#背景-应用场景" aria-hidden="true">#</a> 背景/应用场景</h2><p>随着对海量地理空间数据加载、渲染的需求日益增加。在地理信息系统中，对一些细节程度高的数据在地图上的展示往往需要绘制大量的坐标点，当地图缩放层级较小时，并不需要将所有的点都绘制出来，因为全部绘制出来往往会存在性能问题，因此，可通过<strong>抽稀算法</strong>，将不重要的点舍弃掉，那么系统对矢量数据加载的处理性能将得以提高，同时不影响视觉效果。</p><h2 id="抽稀算法类型" tabindex="-1"><a class="header-anchor" href="#抽稀算法类型" aria-hidden="true">#</a> 抽稀算法类型</h2><p>抽稀，也称作概化。<u>抽稀算法的关键是定义<strong>抽稀因子</strong>，抽稀因子的不同决定了抽稀算法的多样性。在现有抽稀理论中，有按步长，线段长度，垂距等来定义抽稀因子。</u><sup>1</sup>在GIS领域，比较常用的抽稀算法是<strong>Ramer-Douglas-Peucker</strong>算法（基于距离）和<strong>Visvalingam-Whyatt</strong>算法（基于面积）。</p><h3 id="ramer-douglas-peucker-道格拉斯-普克" tabindex="-1"><a class="header-anchor" href="#ramer-douglas-peucker-道格拉斯-普克" aria-hidden="true">#</a> Ramer-Douglas-Peucker（道格拉斯-普克）</h3><p>从整体角度来考虑一条完整曲线或一段具体线段，思路为：</p><ol><li>确定距离阈值<code>D</code>，即抽稀因子，作为判断是否抽稀的指标</li><li>对曲线的首末两点虚连一条直线，计算曲线每个点到虚直线的距离，找到最大距离<code>Dmax</code>，判断其距离与距离阈值<code>D</code>的关系</li><li>如果<code>Dmax &lt; D</code>，则舍弃该曲线的所有中间点，将虚直线作为抽稀后的线段</li><li>如果<code>Dmax &gt;= D</code>，则找到<code>Dmax</code>在曲线上的对应的点作为分割点将当前曲线分割为两段，继续对这两条线段进行<code>第2步</code>操作（即递归处理，直至所有<code>Dmax &lt; D</code>，则处理完毕）</li></ol><figure><img src="'+c+'" alt="Ramer-Douglas-Peucker思路可视化" tabindex="0" loading="lazy"><figcaption>Ramer-Douglas-Peucker思路可视化</figcaption></figure><p>上图说明（可对应思路说明进行理解）：</p><ul><li><strong>黑色曲线</strong>：表示抽稀前的曲线</li><li><strong>浅蓝色直线</strong>：表示虚直线</li><li><strong>深蓝色直线</strong>：表示抽稀后的曲线</li><li><strong>最大值对应点（红色）</strong>：表示<code>Dmax &lt; D</code>，可以舍弃该曲线的所有中间点</li><li><strong>最大值对应点（绿色）</strong>：表示<code>Dmax &gt;= D</code>，需要进行曲线分割并重新处理</li></ul><h3 id="visvalingam-whyatt" tabindex="-1"><a class="header-anchor" href="#visvalingam-whyatt" aria-hidden="true">#</a> Visvalingam-Whyatt</h3><p>是一种渐进式的抽稀方式，思路为：</p><ol><li>确定距离阈值<code>A</code>，即抽稀因子，作为判断是否抽稀的指标</li><li>在一条曲线中，计算由三个连续的点所形成三角形面积，找到这些三角中的最小面积<code>Amin</code>，判断其面积与面积阈值<code>A</code>的关系</li><li>如果<code>Amin &lt; A</code>，则删除该面积对应三角形中的中间顶点，继续对剩下的顶点所形成的曲线进行<code>第2步</code>操作（即递归处理，直至所有<code>Amin &gt; A</code>，则处理完毕）</li></ol><figure><img src="'+d+'" alt="Visvalingam-Whyatt思路可视化" tabindex="0" loading="lazy"><figcaption>Visvalingam-Whyatt思路可视化</figcaption></figure><h3 id="ramer-douglas-peucker和visvalingam-whyatt的算法区别" tabindex="-1"><a class="header-anchor" href="#ramer-douglas-peucker和visvalingam-whyatt的算法区别" aria-hidden="true">#</a> Ramer-Douglas-Peucker和Visvalingam-Whyatt的算法区别</h3><ol><li><code>Ramer-Douglas-Peucker</code>算法的优点是计算简单，但它的结果可能会出现自相交</li><li><code>Ramer-Douglas-Peucker</code>计算效率更高，它的时间复杂度是<code>O(n^2)</code>，<code>Visvalingam-Whyatt</code>的时间复杂度是<code>O(n·log(n))</code>。</li><li><code>Ramer-Douglas-Peucker</code>算法的阈值是距离，<code>Visvalingam-Whyatt</code>算法的阈值是面积</li><li>相比起<code>Ramer-Douglas-Peucker</code>算法的选取保留点，<code>Visvalingam-Whyatt</code>算法是选取删除点</li><li>相比起<code>Ramer-Douglas-Peucker</code>算法，<code>Visvalingam-Whyatt</code>算法产生的角度变化更小，更能保留几何面的特征，更加适用于河流、森林或海岸线等自然线条或多边形特征的抽稀</li></ol><h2 id="拓扑问题" tabindex="-1"><a class="header-anchor" href="#拓扑问题" aria-hidden="true">#</a> 拓扑问题</h2><p>概化数据可能会破坏数据的拓扑关系，因此，可以先将数据转化为拓扑结构，再对拓扑数据进行数据概化（抽稀）</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><h3 id="已有实现" tabindex="-1"><a class="header-anchor" href="#已有实现" aria-hidden="true">#</a> 已有实现</h3>',21),m={href:"https://mapshaper.org/",target:"_blank",rel:"noopener noreferrer"},u={href:"http://mourner.github.io/simplify-js/",target:"_blank",rel:"noopener noreferrer"},p={href:"https://openlayers.org/en/latest/apidoc/module-ol_geom_Geometry-Geometry.html#simplify",target:"_blank",rel:"noopener noreferrer"},f=e("li",null,"QGIS —— MenuBar -> Vector -> Geometry Tools -> Simplify",-1),_=e("li",null,"QGIS —— ToolBox-> GRass -> Vector -> v.generalize",-1),y=e("h2",{id:"参考文档",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考文档","aria-hidden":"true"},"#"),a(" 参考文档")],-1),k={href:"https://baike.baidu.com/item/%E6%8A%BD%E7%A8%80/7297123",target:"_blank",rel:"noopener noreferrer"},x={href:"https://mp.weixin.qq.com/s/dbt8ZNFJ7TuVoGX5u1xWmw",target:"_blank",rel:"noopener noreferrer"},D={href:"https://zhuanlan.zhihu.com/p/355323735",target:"_blank",rel:"noopener noreferrer"},v={href:"https://ignf.github.io/CartAGen/docs/algorithms/line/visvalingam.html",target:"_blank",rel:"noopener noreferrer"};function b(V,R){const o=t("ExternalLinkIcon");return l(),n("div",null,[g,e("ol",null,[e("li",null,[e("a",m,[a("mapshaper -simlpify"),r(o)])]),e("li",null,[e("a",u,[a("Simply.js"),r(o)])]),e("li",null,[e("a",p,[a("OpenpLayers —— ol/geom/Geometry -> simplify(tolerance)"),r(o)])]),f,_]),y,e("ol",null,[e("li",null,[e("p",null,[e("a",k,[a("抽稀-百度百科"),r(o)])])]),e("li",null,[e("p",null,[e("a",x,[a("空间数据量大怎么办，三种方式告诉你怎么抽稀"),r(o)])])]),e("li",null,[e("p",null,[e("a",D,[a("常用的地图数据概化算法：Douglas-Peucker与Visvalingam-Whyatt"),r(o)])])]),e("li",null,[e("p",null,[e("a",v,[a("Description of Visvalingam & Whyatt Line Simplification Algorithm"),r(o)])])])])])}const P=i(h,[["render",b],["__file","simplify.html.vue"]]);export{P as default};
